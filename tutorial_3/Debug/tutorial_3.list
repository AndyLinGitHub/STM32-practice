
tutorial_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004804  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f4  080049f4  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080049f4  080049f4  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049f4  080049f4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f8  080049f8  000149f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080049fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000088  08004a84  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08004a84  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b51f  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba7  00000000  00000000  0002b5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002d180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  0002de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028533  00000000  00000000  0002e9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8fd  00000000  00000000  00056efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f54e4  00000000  00000000  000637f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158cdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e4  00000000  00000000  00158d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000088 	.word	0x20000088
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004998 	.word	0x08004998

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000008c 	.word	0x2000008c
 80001e8:	08004998 	.word	0x08004998

080001ec <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 80001f6:	88fb      	ldrh	r3, [r7, #6]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 ffd1 	bl	80011a0 <mfxstm32l152_GetInstance>
 80001fe:	4603      	mov	r3, r0
 8000200:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8000202:	7bfb      	ldrb	r3, [r7, #15]
 8000204:	2bff      	cmp	r3, #255	; 0xff
 8000206:	d10e      	bne.n	8000226 <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8000208:	2000      	movs	r0, #0
 800020a:	f000 ffc9 	bl	80011a0 <mfxstm32l152_GetInstance>
 800020e:	4603      	mov	r3, r0
 8000210:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8000212:	7bbb      	ldrb	r3, [r7, #14]
 8000214:	2b02      	cmp	r3, #2
 8000216:	d806      	bhi.n	8000226 <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8000218:	7bbb      	ldrb	r3, [r7, #14]
 800021a:	88fa      	ldrh	r2, [r7, #6]
 800021c:	b2d1      	uxtb	r1, r2
 800021e:	4a09      	ldr	r2, [pc, #36]	; (8000244 <mfxstm32l152_Init+0x58>)
 8000220:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8000222:	f001 faad 	bl	8001780 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8000226:	88fb      	ldrh	r3, [r7, #6]
 8000228:	2102      	movs	r1, #2
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f8db 	bl	80003e6 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000230:	88fb      	ldrh	r3, [r7, #6]
 8000232:	2101      	movs	r1, #1
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f8fc 	bl	8000432 <mfxstm32l152_SetIrqOutPinType>
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	200000a4 	.word	0x200000a4

08000248 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8000252:	88fb      	ldrh	r3, [r7, #6]
 8000254:	4618      	mov	r0, r3
 8000256:	f000 ffc3 	bl	80011e0 <mfxstm32l152_ReleaseInstance>
 800025a:	4603      	mov	r3, r0
 800025c:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 800025e:	7bfb      	ldrb	r3, [r7, #15]
 8000260:	2bff      	cmp	r3, #255	; 0xff
 8000262:	d001      	beq.n	8000268 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8000264:	f001 fa9c 	bl	80017a0 <MFX_IO_DeInit>
  }
}
 8000268:	bf00      	nop
 800026a:	3710      	adds	r7, #16
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	2280      	movs	r2, #128	; 0x80
 800027e:	2140      	movs	r1, #64	; 0x40
 8000280:	4618      	mov	r0, r3
 8000282:	f001 fb2f 	bl	80018e4 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8000286:	200a      	movs	r0, #10
 8000288:	f001 fb6e 	bl	8001968 <MFX_IO_Delay>
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	2240      	movs	r2, #64	; 0x40
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 fb1d 	bl	80018e4 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80002aa:	f001 fae3 	bl	8001874 <MFX_IO_EnableWakeupPin>
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80002b6:	b580      	push	{r7, lr}
 80002b8:	b084      	sub	sp, #16
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	4603      	mov	r3, r0
 80002be:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 80002c0:	88fb      	ldrh	r3, [r7, #6]
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 ff6c 	bl	80011a0 <mfxstm32l152_GetInstance>
 80002c8:	4603      	mov	r3, r0
 80002ca:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	2bff      	cmp	r3, #255	; 0xff
 80002d0:	d101      	bne.n	80002d6 <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 80002d2:	f001 facf 	bl	8001874 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 80002d6:	f001 faf1 	bl	80018bc <MFX_IO_Wakeup>
}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	b084      	sub	sp, #16
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	4603      	mov	r3, r0
 80002ea:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 80002ec:	2001      	movs	r0, #1
 80002ee:	f001 fb3b 	bl	8001968 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 80002f2:	f001 fa45 	bl	8001780 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 80002f6:	88fb      	ldrh	r3, [r7, #6]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fb06 	bl	800190c <MFX_IO_Read>
 8000300:	4603      	mov	r3, r0
 8000302:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	b29b      	uxth	r3, r3
}
 8000308:	4618      	mov	r0, r3
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	460a      	mov	r2, r1
 800031a:	80fb      	strh	r3, [r7, #6]
 800031c:	4613      	mov	r3, r2
 800031e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000320:	2300      	movs	r3, #0
 8000322:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000324:	88fb      	ldrh	r3, [r7, #6]
 8000326:	2142      	movs	r1, #66	; 0x42
 8000328:	4618      	mov	r0, r3
 800032a:	f001 faef 	bl	800190c <MFX_IO_Read>
 800032e:	4603      	mov	r3, r0
 8000330:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8000332:	7bfa      	ldrb	r2, [r7, #15]
 8000334:	797b      	ldrb	r3, [r7, #5]
 8000336:	4313      	orrs	r3, r2
 8000338:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 800033a:	7bfa      	ldrb	r2, [r7, #15]
 800033c:	88fb      	ldrh	r3, [r7, #6]
 800033e:	2142      	movs	r1, #66	; 0x42
 8000340:	4618      	mov	r0, r3
 8000342:	f001 facf 	bl	80018e4 <MFX_IO_Write>
}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	b084      	sub	sp, #16
 8000352:	af00      	add	r7, sp, #0
 8000354:	4603      	mov	r3, r0
 8000356:	460a      	mov	r2, r1
 8000358:	80fb      	strh	r3, [r7, #6]
 800035a:	4613      	mov	r3, r2
 800035c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000362:	88fb      	ldrh	r3, [r7, #6]
 8000364:	2142      	movs	r1, #66	; 0x42
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fad0 	bl	800190c <MFX_IO_Read>
 800036c:	4603      	mov	r3, r0
 800036e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8000370:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000374:	43db      	mvns	r3, r3
 8000376:	b25a      	sxtb	r2, r3
 8000378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800037c:	4013      	ands	r3, r2
 800037e:	b25b      	sxtb	r3, r3
 8000380:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000382:	7bfa      	ldrb	r2, [r7, #15]
 8000384:	88fb      	ldrh	r3, [r7, #6]
 8000386:	2142      	movs	r1, #66	; 0x42
 8000388:	4618      	mov	r0, r3
 800038a:	f001 faab 	bl	80018e4 <MFX_IO_Write>
}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b082      	sub	sp, #8
 800039a:	af00      	add	r7, sp, #0
 800039c:	4603      	mov	r3, r0
 800039e:	460a      	mov	r2, r1
 80003a0:	80fb      	strh	r3, [r7, #6]
 80003a2:	4613      	mov	r3, r2
 80003a4:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80003a6:	88fb      	ldrh	r3, [r7, #6]
 80003a8:	2108      	movs	r1, #8
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 faae 	bl	800190c <MFX_IO_Read>
 80003b0:	4603      	mov	r3, r0
 80003b2:	461a      	mov	r2, r3
 80003b4:	797b      	ldrb	r3, [r7, #5]
 80003b6:	4013      	ands	r3, r2
 80003b8:	b2db      	uxtb	r3, r3
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b082      	sub	sp, #8
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	4603      	mov	r3, r0
 80003ca:	460a      	mov	r2, r1
 80003cc:	80fb      	strh	r3, [r7, #6]
 80003ce:	4613      	mov	r3, r2
 80003d0:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 80003d2:	797a      	ldrb	r2, [r7, #5]
 80003d4:	88fb      	ldrh	r3, [r7, #6]
 80003d6:	2144      	movs	r1, #68	; 0x44
 80003d8:	4618      	mov	r0, r3
 80003da:	f001 fa83 	bl	80018e4 <MFX_IO_Write>
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b084      	sub	sp, #16
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	4603      	mov	r3, r0
 80003ee:	460a      	mov	r2, r1
 80003f0:	80fb      	strh	r3, [r7, #6]
 80003f2:	4613      	mov	r3, r2
 80003f4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 80003fa:	88fb      	ldrh	r3, [r7, #6]
 80003fc:	2141      	movs	r1, #65	; 0x41
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 fa84 	bl	800190c <MFX_IO_Read>
 8000404:	4603      	mov	r3, r0
 8000406:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	f023 0302 	bic.w	r3, r3, #2
 800040e:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8000410:	7bfa      	ldrb	r2, [r7, #15]
 8000412:	797b      	ldrb	r3, [r7, #5]
 8000414:	4313      	orrs	r3, r2
 8000416:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000418:	7bfa      	ldrb	r2, [r7, #15]
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	2141      	movs	r1, #65	; 0x41
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fa60 	bl	80018e4 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f001 fa9f 	bl	8001968 <MFX_IO_Delay>

}
 800042a:	bf00      	nop
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b084      	sub	sp, #16
 8000436:	af00      	add	r7, sp, #0
 8000438:	4603      	mov	r3, r0
 800043a:	460a      	mov	r2, r1
 800043c:	80fb      	strh	r3, [r7, #6]
 800043e:	4613      	mov	r3, r2
 8000440:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000446:	88fb      	ldrh	r3, [r7, #6]
 8000448:	2141      	movs	r1, #65	; 0x41
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fa5e 	bl	800190c <MFX_IO_Read>
 8000450:	4603      	mov	r3, r0
 8000452:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	f023 0301 	bic.w	r3, r3, #1
 800045a:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 800045c:	7bfa      	ldrb	r2, [r7, #15]
 800045e:	797b      	ldrb	r3, [r7, #5]
 8000460:	4313      	orrs	r3, r2
 8000462:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000464:	7bfa      	ldrb	r2, [r7, #15]
 8000466:	88fb      	ldrh	r3, [r7, #6]
 8000468:	2141      	movs	r1, #65	; 0x41
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fa3a 	bl	80018e4 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000470:	2001      	movs	r0, #1
 8000472:	f001 fa79 	bl	8001968 <MFX_IO_Delay>

}
 8000476:	bf00      	nop
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	b084      	sub	sp, #16
 8000482:	af00      	add	r7, sp, #0
 8000484:	4603      	mov	r3, r0
 8000486:	6039      	str	r1, [r7, #0]
 8000488:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 800048a:	88fb      	ldrh	r3, [r7, #6]
 800048c:	2140      	movs	r1, #64	; 0x40
 800048e:	4618      	mov	r0, r3
 8000490:	f001 fa3c 	bl	800190c <MFX_IO_Read>
 8000494:	4603      	mov	r3, r0
 8000496:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8000498:	7bfb      	ldrb	r3, [r7, #15]
 800049a:	f043 0301 	orr.w	r3, r3, #1
 800049e:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004a6:	d304      	bcc.n	80004b2 <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	73fb      	strb	r3, [r7, #15]
 80004b0:	e003      	b.n	80004ba <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	f023 0308 	bic.w	r3, r3, #8
 80004b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80004ba:	7bfa      	ldrb	r2, [r7, #15]
 80004bc:	88fb      	ldrh	r3, [r7, #6]
 80004be:	2140      	movs	r1, #64	; 0x40
 80004c0:	4618      	mov	r0, r3
 80004c2:	f001 fa0f 	bl	80018e4 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f001 fa4e 	bl	8001968 <MFX_IO_Delay>
}
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	6039      	str	r1, [r7, #0]
 80004de:	80fb      	strh	r3, [r7, #6]
 80004e0:	4613      	mov	r3, r2
 80004e2:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 80004e8:	797b      	ldrb	r3, [r7, #5]
 80004ea:	2b17      	cmp	r3, #23
 80004ec:	f200 82d4 	bhi.w	8000a98 <mfxstm32l152_IO_Config+0x5c4>
 80004f0:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <mfxstm32l152_IO_Config+0x24>)
 80004f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f6:	bf00      	nop
 80004f8:	08000589 	.word	0x08000589
 80004fc:	08000619 	.word	0x08000619
 8000500:	080006d9 	.word	0x080006d9
 8000504:	080007c9 	.word	0x080007c9
 8000508:	080008b9 	.word	0x080008b9
 800050c:	080009a9 	.word	0x080009a9
 8000510:	08000559 	.word	0x08000559
 8000514:	08000559 	.word	0x08000559
 8000518:	080005b9 	.word	0x080005b9
 800051c:	080005e9 	.word	0x080005e9
 8000520:	08000a99 	.word	0x08000a99
 8000524:	080006a9 	.word	0x080006a9
 8000528:	08000679 	.word	0x08000679
 800052c:	08000a99 	.word	0x08000a99
 8000530:	08000649 	.word	0x08000649
 8000534:	08000619 	.word	0x08000619
 8000538:	08000729 	.word	0x08000729
 800053c:	08000779 	.word	0x08000779
 8000540:	08000819 	.word	0x08000819
 8000544:	08000869 	.word	0x08000869
 8000548:	08000909 	.word	0x08000909
 800054c:	08000959 	.word	0x08000959
 8000550:	080009f9 	.word	0x080009f9
 8000554:	08000a49 	.word	0x08000a49
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	6839      	ldr	r1, [r7, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fb67 	bl	8000c30 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000562:	88fb      	ldrh	r3, [r7, #6]
 8000564:	2200      	movs	r2, #0
 8000566:	6839      	ldr	r1, [r7, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fa9d 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800056e:	88f8      	ldrh	r0, [r7, #6]
 8000570:	2300      	movs	r3, #0
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	2164      	movs	r1, #100	; 0x64
 8000576:	f000 fe57 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800057a:	88f8      	ldrh	r0, [r7, #6]
 800057c:	2300      	movs	r3, #0
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	2168      	movs	r1, #104	; 0x68
 8000582:	f000 fe51 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    break;
 8000586:	e28a      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	6839      	ldr	r1, [r7, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fb4f 	bl	8000c30 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	2200      	movs	r2, #0
 8000596:	6839      	ldr	r1, [r7, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fa85 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800059e:	88f8      	ldrh	r0, [r7, #6]
 80005a0:	2300      	movs	r3, #0
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	2164      	movs	r1, #100	; 0x64
 80005a6:	f000 fe3f 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80005aa:	88f8      	ldrh	r0, [r7, #6]
 80005ac:	2301      	movs	r3, #1
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	2168      	movs	r1, #104	; 0x68
 80005b2:	f000 fe39 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    break;
 80005b6:	e272      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	6839      	ldr	r1, [r7, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fb37 	bl	8000c30 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	2200      	movs	r2, #0
 80005c6:	6839      	ldr	r1, [r7, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fa6d 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80005ce:	88f8      	ldrh	r0, [r7, #6]
 80005d0:	2301      	movs	r3, #1
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	2164      	movs	r1, #100	; 0x64
 80005d6:	f000 fe27 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80005da:	88f8      	ldrh	r0, [r7, #6]
 80005dc:	2301      	movs	r3, #1
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	2168      	movs	r1, #104	; 0x68
 80005e2:	f000 fe21 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    break;
 80005e6:	e25a      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	6839      	ldr	r1, [r7, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fb1f 	bl	8000c30 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	2200      	movs	r2, #0
 80005f6:	6839      	ldr	r1, [r7, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fa55 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80005fe:	88f8      	ldrh	r0, [r7, #6]
 8000600:	2301      	movs	r3, #1
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	2164      	movs	r1, #100	; 0x64
 8000606:	f000 fe0f 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800060a:	88f8      	ldrh	r0, [r7, #6]
 800060c:	2300      	movs	r3, #0
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	2168      	movs	r1, #104	; 0x68
 8000612:	f000 fe09 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    break;
 8000616:	e242      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	6839      	ldr	r1, [r7, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fb07 	bl	8000c30 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	2201      	movs	r2, #1
 8000626:	6839      	ldr	r1, [r7, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fa3d 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 800062e:	88f8      	ldrh	r0, [r7, #6]
 8000630:	2300      	movs	r3, #0
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	2164      	movs	r1, #100	; 0x64
 8000636:	f000 fdf7 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800063a:	88f8      	ldrh	r0, [r7, #6]
 800063c:	2300      	movs	r3, #0
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	2168      	movs	r1, #104	; 0x68
 8000642:	f000 fdf1 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    break;
 8000646:	e22a      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 faef 	bl	8000c30 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	2201      	movs	r2, #1
 8000656:	6839      	ldr	r1, [r7, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fa25 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 800065e:	88f8      	ldrh	r0, [r7, #6]
 8000660:	2300      	movs	r3, #0
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	2164      	movs	r1, #100	; 0x64
 8000666:	f000 fddf 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800066a:	88f8      	ldrh	r0, [r7, #6]
 800066c:	2301      	movs	r3, #1
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	2168      	movs	r1, #104	; 0x68
 8000672:	f000 fdd9 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    break;
 8000676:	e212      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	6839      	ldr	r1, [r7, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fad7 	bl	8000c30 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	2201      	movs	r2, #1
 8000686:	6839      	ldr	r1, [r7, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fa0d 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800068e:	88f8      	ldrh	r0, [r7, #6]
 8000690:	2301      	movs	r3, #1
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	2164      	movs	r1, #100	; 0x64
 8000696:	f000 fdc7 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800069a:	88f8      	ldrh	r0, [r7, #6]
 800069c:	2300      	movs	r3, #0
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	2168      	movs	r1, #104	; 0x68
 80006a2:	f000 fdc1 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    break;
 80006a6:	e1fa      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	6839      	ldr	r1, [r7, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fabf 	bl	8000c30 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80006b2:	88fb      	ldrh	r3, [r7, #6]
 80006b4:	2201      	movs	r2, #1
 80006b6:	6839      	ldr	r1, [r7, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f9f5 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80006be:	88f8      	ldrh	r0, [r7, #6]
 80006c0:	2301      	movs	r3, #1
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	2164      	movs	r1, #100	; 0x64
 80006c6:	f000 fdaf 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80006ca:	88f8      	ldrh	r0, [r7, #6]
 80006cc:	2301      	movs	r3, #1
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	2168      	movs	r1, #104	; 0x68
 80006d2:	f000 fda9 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    break;
 80006d6:	e1e2      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fa7a 	bl	8000bd4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	2200      	movs	r2, #0
 80006e4:	6839      	ldr	r1, [r7, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f9de 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80006ec:	88f8      	ldrh	r0, [r7, #6]
 80006ee:	2300      	movs	r3, #0
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	2164      	movs	r1, #100	; 0x64
 80006f4:	f000 fd98 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80006f8:	88f8      	ldrh	r0, [r7, #6]
 80006fa:	2301      	movs	r3, #1
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	2168      	movs	r1, #104	; 0x68
 8000700:	f000 fd92 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	2201      	movs	r2, #1
 8000708:	6839      	ldr	r1, [r7, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f9de 	bl	8000acc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	2201      	movs	r2, #1
 8000714:	6839      	ldr	r1, [r7, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f9ed 	bl	8000af6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	6839      	ldr	r1, [r7, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fa75 	bl	8000c10 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000726:	e1ba      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fa52 	bl	8000bd4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	2200      	movs	r2, #0
 8000734:	6839      	ldr	r1, [r7, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f9b6 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800073c:	88f8      	ldrh	r0, [r7, #6]
 800073e:	2301      	movs	r3, #1
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	2164      	movs	r1, #100	; 0x64
 8000744:	f000 fd70 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000748:	88f8      	ldrh	r0, [r7, #6]
 800074a:	2301      	movs	r3, #1
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	2168      	movs	r1, #104	; 0x68
 8000750:	f000 fd6a 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	2201      	movs	r2, #1
 8000758:	6839      	ldr	r1, [r7, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f9b6 	bl	8000acc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	2201      	movs	r2, #1
 8000764:	6839      	ldr	r1, [r7, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f9c5 	bl	8000af6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	6839      	ldr	r1, [r7, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fa4d 	bl	8000c10 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000776:	e192      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fa2a 	bl	8000bd4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	2200      	movs	r2, #0
 8000784:	6839      	ldr	r1, [r7, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f98e 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800078c:	88f8      	ldrh	r0, [r7, #6]
 800078e:	2301      	movs	r3, #1
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	2164      	movs	r1, #100	; 0x64
 8000794:	f000 fd48 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000798:	88f8      	ldrh	r0, [r7, #6]
 800079a:	2300      	movs	r3, #0
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	2168      	movs	r1, #104	; 0x68
 80007a0:	f000 fd42 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	2201      	movs	r2, #1
 80007a8:	6839      	ldr	r1, [r7, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f98e 	bl	8000acc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80007b0:	88fb      	ldrh	r3, [r7, #6]
 80007b2:	2201      	movs	r2, #1
 80007b4:	6839      	ldr	r1, [r7, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f99d 	bl	8000af6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	6839      	ldr	r1, [r7, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fa25 	bl	8000c10 <mfxstm32l152_IO_EnablePinIT>
    break;
 80007c6:	e16a      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fa02 	bl	8000bd4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	2200      	movs	r2, #0
 80007d4:	6839      	ldr	r1, [r7, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f966 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80007dc:	88f8      	ldrh	r0, [r7, #6]
 80007de:	2300      	movs	r3, #0
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	2164      	movs	r1, #100	; 0x64
 80007e4:	f000 fd20 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80007e8:	88f8      	ldrh	r0, [r7, #6]
 80007ea:	2301      	movs	r3, #1
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	2168      	movs	r1, #104	; 0x68
 80007f0:	f000 fd1a 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	2201      	movs	r2, #1
 80007f8:	6839      	ldr	r1, [r7, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f966 	bl	8000acc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	2200      	movs	r2, #0
 8000804:	6839      	ldr	r1, [r7, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f975 	bl	8000af6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f9fd 	bl	8000c10 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000816:	e142      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f9da 	bl	8000bd4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	2200      	movs	r2, #0
 8000824:	6839      	ldr	r1, [r7, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f93e 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800082c:	88f8      	ldrh	r0, [r7, #6]
 800082e:	2301      	movs	r3, #1
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	2164      	movs	r1, #100	; 0x64
 8000834:	f000 fcf8 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000838:	88f8      	ldrh	r0, [r7, #6]
 800083a:	2301      	movs	r3, #1
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	2168      	movs	r1, #104	; 0x68
 8000840:	f000 fcf2 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	2201      	movs	r2, #1
 8000848:	6839      	ldr	r1, [r7, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f93e 	bl	8000acc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	2200      	movs	r2, #0
 8000854:	6839      	ldr	r1, [r7, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f94d 	bl	8000af6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	6839      	ldr	r1, [r7, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f9d5 	bl	8000c10 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000866:	e11a      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f9b2 	bl	8000bd4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	2200      	movs	r2, #0
 8000874:	6839      	ldr	r1, [r7, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f916 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800087c:	88f8      	ldrh	r0, [r7, #6]
 800087e:	2301      	movs	r3, #1
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	2164      	movs	r1, #100	; 0x64
 8000884:	f000 fcd0 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000888:	88f8      	ldrh	r0, [r7, #6]
 800088a:	2300      	movs	r3, #0
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	2168      	movs	r1, #104	; 0x68
 8000890:	f000 fcca 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	2201      	movs	r2, #1
 8000898:	6839      	ldr	r1, [r7, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f916 	bl	8000acc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	2200      	movs	r2, #0
 80008a4:	6839      	ldr	r1, [r7, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f925 	bl	8000af6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	6839      	ldr	r1, [r7, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f9ad 	bl	8000c10 <mfxstm32l152_IO_EnablePinIT>
    break;
 80008b6:	e0f2      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80008b8:	88fb      	ldrh	r3, [r7, #6]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f98a 	bl	8000bd4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80008c0:	88fb      	ldrh	r3, [r7, #6]
 80008c2:	2200      	movs	r2, #0
 80008c4:	6839      	ldr	r1, [r7, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f8ee 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80008cc:	88f8      	ldrh	r0, [r7, #6]
 80008ce:	2300      	movs	r3, #0
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	2164      	movs	r1, #100	; 0x64
 80008d4:	f000 fca8 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80008d8:	88f8      	ldrh	r0, [r7, #6]
 80008da:	2301      	movs	r3, #1
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	2168      	movs	r1, #104	; 0x68
 80008e0:	f000 fca2 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	2200      	movs	r2, #0
 80008e8:	6839      	ldr	r1, [r7, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f8ee 	bl	8000acc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	2200      	movs	r2, #0
 80008f4:	6839      	ldr	r1, [r7, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f8fd 	bl	8000af6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	6839      	ldr	r1, [r7, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f000 f985 	bl	8000c10 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000906:	e0ca      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f962 	bl	8000bd4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	2200      	movs	r2, #0
 8000914:	6839      	ldr	r1, [r7, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f8c6 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800091c:	88f8      	ldrh	r0, [r7, #6]
 800091e:	2301      	movs	r3, #1
 8000920:	683a      	ldr	r2, [r7, #0]
 8000922:	2164      	movs	r1, #100	; 0x64
 8000924:	f000 fc80 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000928:	88f8      	ldrh	r0, [r7, #6]
 800092a:	2301      	movs	r3, #1
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	2168      	movs	r1, #104	; 0x68
 8000930:	f000 fc7a 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	2200      	movs	r2, #0
 8000938:	6839      	ldr	r1, [r7, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f8c6 	bl	8000acc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	2200      	movs	r2, #0
 8000944:	6839      	ldr	r1, [r7, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f8d5 	bl	8000af6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	6839      	ldr	r1, [r7, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f95d 	bl	8000c10 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000956:	e0a2      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f93a 	bl	8000bd4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	2200      	movs	r2, #0
 8000964:	6839      	ldr	r1, [r7, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f89e 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800096c:	88f8      	ldrh	r0, [r7, #6]
 800096e:	2301      	movs	r3, #1
 8000970:	683a      	ldr	r2, [r7, #0]
 8000972:	2164      	movs	r1, #100	; 0x64
 8000974:	f000 fc58 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000978:	88f8      	ldrh	r0, [r7, #6]
 800097a:	2300      	movs	r3, #0
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	2168      	movs	r1, #104	; 0x68
 8000980:	f000 fc52 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	2200      	movs	r2, #0
 8000988:	6839      	ldr	r1, [r7, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f89e 	bl	8000acc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000990:	88fb      	ldrh	r3, [r7, #6]
 8000992:	2200      	movs	r2, #0
 8000994:	6839      	ldr	r1, [r7, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f8ad 	bl	8000af6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	6839      	ldr	r1, [r7, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f935 	bl	8000c10 <mfxstm32l152_IO_EnablePinIT>
    break;
 80009a6:	e07a      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f912 	bl	8000bd4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	2200      	movs	r2, #0
 80009b4:	6839      	ldr	r1, [r7, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f876 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80009bc:	88f8      	ldrh	r0, [r7, #6]
 80009be:	2300      	movs	r3, #0
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	2164      	movs	r1, #100	; 0x64
 80009c4:	f000 fc30 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80009c8:	88f8      	ldrh	r0, [r7, #6]
 80009ca:	2301      	movs	r3, #1
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	2168      	movs	r1, #104	; 0x68
 80009d0:	f000 fc2a 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	2200      	movs	r2, #0
 80009d8:	6839      	ldr	r1, [r7, #0]
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f876 	bl	8000acc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	2201      	movs	r2, #1
 80009e4:	6839      	ldr	r1, [r7, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f885 	bl	8000af6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	6839      	ldr	r1, [r7, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f90d 	bl	8000c10 <mfxstm32l152_IO_EnablePinIT>
    break;
 80009f6:	e052      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f8ea 	bl	8000bd4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	2200      	movs	r2, #0
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f84e 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000a0c:	88f8      	ldrh	r0, [r7, #6]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	2164      	movs	r1, #100	; 0x64
 8000a14:	f000 fc08 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000a18:	88f8      	ldrh	r0, [r7, #6]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	2168      	movs	r1, #104	; 0x68
 8000a20:	f000 fc02 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	2200      	movs	r2, #0
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f84e 	bl	8000acc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	2201      	movs	r2, #1
 8000a34:	6839      	ldr	r1, [r7, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f85d 	bl	8000af6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f8e5 	bl	8000c10 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000a46:	e02a      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f8c2 	bl	8000bd4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	2200      	movs	r2, #0
 8000a54:	6839      	ldr	r1, [r7, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f826 	bl	8000aa8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000a5c:	88f8      	ldrh	r0, [r7, #6]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	2164      	movs	r1, #100	; 0x64
 8000a64:	f000 fbe0 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000a68:	88f8      	ldrh	r0, [r7, #6]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	2168      	movs	r1, #104	; 0x68
 8000a70:	f000 fbda 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	2200      	movs	r2, #0
 8000a78:	6839      	ldr	r1, [r7, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f826 	bl	8000acc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	2201      	movs	r2, #1
 8000a84:	6839      	ldr	r1, [r7, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f835 	bl	8000af6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	6839      	ldr	r1, [r7, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f8bd 	bl	8000c10 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000a96:	e002      	b.n	8000a9e <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8000a98:	797b      	ldrb	r3, [r7, #5]
 8000a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8000a9c:	bf00      	nop
  }

  return error_code;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8000ab8:	797b      	ldrb	r3, [r7, #5]
 8000aba:	88f8      	ldrh	r0, [r7, #6]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	2160      	movs	r1, #96	; 0x60
 8000ac0:	f000 fbb2 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	80fb      	strh	r3, [r7, #6]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8000adc:	797b      	ldrb	r3, [r7, #5]
 8000ade:	88f8      	ldrh	r0, [r7, #6]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	214c      	movs	r1, #76	; 0x4c
 8000ae4:	f000 fba0 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 ff3d 	bl	8001968 <MFX_IO_Delay>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	6039      	str	r1, [r7, #0]
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	4613      	mov	r3, r2
 8000b04:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8000b06:	797b      	ldrb	r3, [r7, #5]
 8000b08:	88f8      	ldrh	r0, [r7, #6]
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	2150      	movs	r1, #80	; 0x50
 8000b0e:	f000 fb8b 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 ff28 	bl	8001968 <MFX_IO_Delay>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	80fb      	strh	r3, [r7, #6]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8000b30:	797b      	ldrb	r3, [r7, #5]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8000b36:	88f8      	ldrh	r0, [r7, #6]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	216c      	movs	r1, #108	; 0x6c
 8000b3e:	f000 fb73 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8000b42:	e005      	b.n	8000b50 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8000b44:	88f8      	ldrh	r0, [r7, #6]
 8000b46:	2301      	movs	r3, #1
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	2170      	movs	r1, #112	; 0x70
 8000b4c:	f000 fb6c 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fec5 	bl	800190c <MFX_IO_Read>
 8000b82:	4603      	mov	r3, r0
 8000b84:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	2111      	movs	r1, #17
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 feb9 	bl	800190c <MFX_IO_Read>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d006      	beq.n	8000bb6 <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	2112      	movs	r1, #18
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fead 	bl	800190c <MFX_IO_Read>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	021a      	lsls	r2, r3, #8
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	441a      	add	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	041b      	lsls	r3, r3, #16
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	4013      	ands	r3, r2
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8000bde:	f000 fe1b 	bl	8001818 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	2101      	movs	r1, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fb92 	bl	8000310 <mfxstm32l152_EnableITSource>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	2101      	movs	r1, #1
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fba3 	bl	800034e <mfxstm32l152_DisableITSource>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8000c1c:	88f8      	ldrh	r0, [r7, #6]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	2148      	movs	r1, #72	; 0x48
 8000c24:	f000 fb00 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8000c3c:	88f8      	ldrh	r0, [r7, #6]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	2148      	movs	r1, #72	; 0x48
 8000c44:	f000 faf0 	bl	8001228 <mfxstm32l152_reg24_setPinValue>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	210c      	movs	r1, #12
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fe49 	bl	800190c <MFX_IO_Read>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c84:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	210d      	movs	r1, #13
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fe3b 	bl	800190c <MFX_IO_Read>
 8000c96:	4603      	mov	r3, r0
 8000c98:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	0c1b      	lsrs	r3, r3, #16
 8000c9e:	041b      	lsls	r3, r3, #16
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d006      	beq.n	8000cb2 <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	210e      	movs	r1, #14
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 fe2f 	bl	800190c <MFX_IO_Read>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8000cb2:	7bfa      	ldrb	r2, [r7, #15]
 8000cb4:	89bb      	ldrh	r3, [r7, #12]
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	4413      	add	r3, r2
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	041b      	lsls	r3, r3, #16
 8000cc0:	4413      	add	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	4013      	ands	r3, r2
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	6039      	str	r1, [r7, #0]
 8000cdc:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	0c1b      	lsrs	r3, r3, #16
 8000cec:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d005      	beq.n	8000d00 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8000cf4:	7bfa      	ldrb	r2, [r7, #15]
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	2154      	movs	r1, #84	; 0x54
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fdf2 	bl	80018e4 <MFX_IO_Write>
  }
  if (pin_8_15)
 8000d00:	7bbb      	ldrb	r3, [r7, #14]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d005      	beq.n	8000d12 <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8000d06:	7bba      	ldrb	r2, [r7, #14]
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	2155      	movs	r1, #85	; 0x55
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fde9 	bl	80018e4 <MFX_IO_Write>
  }
  if (pin_16_23)
 8000d12:	7b7b      	ldrb	r3, [r7, #13]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d005      	beq.n	8000d24 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8000d18:	7b7a      	ldrb	r2, [r7, #13]
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	2156      	movs	r1, #86	; 0x56
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fde0 	bl	80018e4 <MFX_IO_Write>
  }
}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fde2 	bl	800190c <MFX_IO_Read>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	7bfa      	ldrb	r2, [r7, #15]
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fdc0 	bl	80018e4 <MFX_IO_Write>
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	b590      	push	{r4, r7, lr}
 8000d70:	b085      	sub	sp, #20
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4604      	mov	r4, r0
 8000d76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000d7e:	4623      	mov	r3, r4
 8000d80:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	2140      	movs	r1, #64	; 0x40
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fdba 	bl	800190c <MFX_IO_Read>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8000d9c:	7bbb      	ldrb	r3, [r7, #14]
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10b      	bne.n	8000dbe <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 8000da6:	7bbb      	ldrb	r3, [r7, #14]
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	7bba      	ldrb	r2, [r7, #14]
 8000db6:	2140      	movs	r1, #64	; 0x40
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fd93 	bl	80018e4 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8000dbe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	f003 030e 	and.w	r3, r3, #14
 8000dca:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8000dcc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd6:	b25a      	sxtb	r2, r3
 8000dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8000de2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000dec:	b25a      	sxtb	r2, r3
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	7bfa      	ldrb	r2, [r7, #15]
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fd6e 	bl	80018e4 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8000e08:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e12:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8000e14:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e1e:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	7bfa      	ldrb	r2, [r7, #15]
 8000e2e:	2181      	movs	r1, #129	; 0x81
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fd57 	bl	80018e4 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8000e36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	2182      	movs	r1, #130	; 0x82
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fd4b 	bl	80018e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8000e4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e50:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	7bfa      	ldrb	r2, [r7, #15]
 8000e5a:	2183      	movs	r1, #131	; 0x83
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fd41 	bl	80018e4 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8000e62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	7bfa      	ldrb	r2, [r7, #15]
 8000e72:	2184      	movs	r1, #132	; 0x84
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fd35 	bl	80018e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8000e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e7c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	7bfa      	ldrb	r2, [r7, #15]
 8000e86:	2185      	movs	r1, #133	; 0x85
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fd2b 	bl	80018e4 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8000e8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	2186      	movs	r1, #134	; 0x86
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fd1f 	bl	80018e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8000ea6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ea8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	7bfa      	ldrb	r2, [r7, #15]
 8000eb2:	2187      	movs	r1, #135	; 0x87
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fd15 	bl	80018e4 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8000eba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	2188      	movs	r1, #136	; 0x88
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fd09 	bl	80018e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8000ed2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ed4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	2189      	movs	r1, #137	; 0x89
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fcff 	bl	80018e4 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8000ee6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	218a      	movs	r1, #138	; 0x8a
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fcf3 	bl	80018e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8000efe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f00:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	218b      	movs	r1, #139	; 0x8b
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fce9 	bl	80018e4 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8000f12:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000f14:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	2190      	movs	r1, #144	; 0x90
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fcdf 	bl	80018e4 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8000f26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000f28:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	2191      	movs	r1, #145	; 0x91
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fcd5 	bl	80018e4 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8000f3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f3c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	2192      	movs	r1, #146	; 0x92
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fccb 	bl	80018e4 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8000f4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f50:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	2193      	movs	r1, #147	; 0x93
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fcc1 	bl	80018e4 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8000f62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000f64:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	2194      	movs	r1, #148	; 0x94
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fcb7 	bl	80018e4 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8000f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	218c      	movs	r1, #140	; 0x8c
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fcab 	bl	80018e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8000f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f90:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	218d      	movs	r1, #141	; 0x8d
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fca1 	bl	80018e4 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8000fa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	218e      	movs	r1, #142	; 0x8e
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fc95 	bl	80018e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8000fba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fbc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	218f      	movs	r1, #143	; 0x8f
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fc8b 	bl	80018e4 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8000fce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000fd2:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	2196      	movs	r1, #150	; 0x96
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fc80 	bl	80018e4 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8000fe4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fee:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8000ff0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ffa:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	b29b      	uxth	r3, r3
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	2197      	movs	r1, #151	; 0x97
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fc69 	bl	80018e4 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8001012:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001016:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	b29b      	uxth	r3, r3
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	2198      	movs	r1, #152	; 0x98
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fc5e 	bl	80018e4 <MFX_IO_Write>
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001032:	b004      	add	sp, #16
 8001034:	4770      	bx	lr

08001036 <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	6039      	str	r1, [r7, #0]
 8001040:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	b298      	uxth	r0, r3
 8001048:	f107 020c 	add.w	r2, r7, #12
 800104c:	2303      	movs	r3, #3
 800104e:	2114      	movs	r1, #20
 8001050:	f000 fc70 	bl	8001934 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	041a      	lsls	r2, r3, #16
 8001058:	7b7b      	ldrb	r3, [r7, #13]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	4313      	orrs	r3, r2
 800105e:	7bba      	ldrb	r2, [r7, #14]
 8001060:	4313      	orrs	r3, r2
 8001062:	461a      	mov	r2, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	601a      	str	r2, [r3, #0]

}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800107a:	f000 fbcd 	bl	8001818 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	2102      	movs	r1, #2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f944 	bl	8000310 <mfxstm32l152_EnableITSource>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	2102      	movs	r1, #2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f98f 	bl	80003c2 <mfxstm32l152_ClearGlobalIT>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	2102      	movs	r1, #2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f96b 	bl	8000396 <mfxstm32l152_GlobalITStatus>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	2102      	movs	r1, #2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f938 	bl	800034e <mfxstm32l152_DisableITSource>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2103      	movs	r1, #3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fc07 	bl	800190c <MFX_IO_Read>
 80010fe:	4603      	mov	r3, r0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	b29b      	uxth	r3, r3
 8001118:	2104      	movs	r1, #4
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fbf6 	bl	800190c <MFX_IO_Read>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001134:	f000 fb70 	bl	8001818 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	2104      	movs	r1, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f8e7 	bl	8000310 <mfxstm32l152_EnableITSource>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	2104      	movs	r1, #4
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f932 	bl	80003c2 <mfxstm32l152_ClearGlobalIT>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	2104      	movs	r1, #4
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f90e 	bl	8000396 <mfxstm32l152_GlobalITStatus>
 800117a:	4603      	mov	r3, r0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	2104      	movs	r1, #4
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f8db 	bl	800034e <mfxstm32l152_DisableITSource>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	e00b      	b.n	80011c8 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <mfxstm32l152_GetInstance+0x3c>)
 80011b4:	5cd3      	ldrb	r3, [r2, r3]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	88fa      	ldrh	r2, [r7, #6]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d101      	bne.n	80011c2 <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	e006      	b.n	80011d0 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	3301      	adds	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d9f0      	bls.n	80011b0 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 80011ce:	23ff      	movs	r3, #255	; 0xff
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	200000a4 	.word	0x200000a4

080011e0 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e00f      	b.n	8001210 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <mfxstm32l152_ReleaseInstance+0x44>)
 80011f4:	5cd3      	ldrb	r3, [r2, r3]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	88fa      	ldrh	r2, [r7, #6]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d105      	bne.n	800120a <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <mfxstm32l152_ReleaseInstance+0x44>)
 8001202:	2100      	movs	r1, #0
 8001204:	54d1      	strb	r1, [r2, r3]
      return idx;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	e006      	b.n	8001218 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	3301      	adds	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d9ec      	bls.n	80011f0 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8001216:	23ff      	movs	r3, #255	; 0xff
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	200000a4 	.word	0x200000a4

08001228 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	603a      	str	r2, [r7, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
 8001236:	460b      	mov	r3, r1
 8001238:	717b      	strb	r3, [r7, #5]
 800123a:	4613      	mov	r3, r2
 800123c:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	0c1b      	lsrs	r3, r3, #16
 8001250:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d01e      	beq.n	8001296 <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8001258:	797a      	ldrb	r2, [r7, #5]
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fb54 	bl	800190c <MFX_IO_Read>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001268:	793b      	ldrb	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	7bbb      	ldrb	r3, [r7, #14]
 8001272:	4313      	orrs	r3, r2
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	e008      	b.n	800128a <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8001278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800127c:	43db      	mvns	r3, r3
 800127e:	b25a      	sxtb	r2, r3
 8001280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001284:	4013      	ands	r3, r2
 8001286:	b25b      	sxtb	r3, r3
 8001288:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	7979      	ldrb	r1, [r7, #5]
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fb27 	bl	80018e4 <MFX_IO_Write>
  }

  if (pin_8_15)
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d022      	beq.n	80012e2 <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 800129c:	797b      	ldrb	r3, [r7, #5]
 800129e:	3301      	adds	r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fb30 	bl	800190c <MFX_IO_Read>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80012b0:	793b      	ldrb	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	7b7b      	ldrb	r3, [r7, #13]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e008      	b.n	80012d2 <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 80012c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012cc:	4013      	ands	r3, r2
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 80012d2:	797b      	ldrb	r3, [r7, #5]
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2d9      	uxtb	r1, r3
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fb01 	bl	80018e4 <MFX_IO_Write>
  }

  if (pin_16_23)
 80012e2:	7b3b      	ldrb	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d022      	beq.n	800132e <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 80012e8:	797b      	ldrb	r3, [r7, #5]
 80012ea:	3302      	adds	r3, #2
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fb0a 	bl	800190c <MFX_IO_Read>
 80012f8:	4603      	mov	r3, r0
 80012fa:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80012fc:	793b      	ldrb	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d004      	beq.n	800130c <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	7b3b      	ldrb	r3, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e008      	b.n	800131e <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 800130c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	b25a      	sxtb	r2, r3
 8001314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001318:	4013      	ands	r3, r2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 800131e:	797b      	ldrb	r3, [r7, #5]
 8001320:	3302      	adds	r3, #2
 8001322:	b2d9      	uxtb	r1, r3
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fadb 	bl	80018e4 <MFX_IO_Write>
  }
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  while (1);
 800133a:	e7fe      	b.n	800133a <BSP_ErrorHandler+0x4>

0800133c <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d124      	bne.n	8001396 <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <BSP_LED_Init+0x90>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <BSP_LED_Init+0x90>)
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <BSP_LED_Init+0x90>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <BSP_LED_Init+0x94>)
 8001368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800136c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	4619      	mov	r1, r3
 8001380:	4814      	ldr	r0, [pc, #80]	; (80013d4 <BSP_LED_Init+0x98>)
 8001382:	f000 fe51 	bl	8002028 <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	b29b      	uxth	r3, r3
 800138a:	2201      	movs	r2, #1
 800138c:	4619      	mov	r1, r3
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <BSP_LED_Init+0x98>)
 8001390:	f001 f8ce 	bl	8002530 <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 8001394:	e016      	b.n	80013c4 <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 8001396:	f000 faf3 	bl	8001980 <BSP_IO_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 80013a0:	f7ff ffc9 	bl	8001336 <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <BSP_LED_Init+0x94>)
 80013a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ac:	2101      	movs	r1, #1
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fb2a 	bl	8001a08 <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <BSP_LED_Init+0x94>)
 80013b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013bc:	2101      	movs	r1, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fb3e 	bl	8001a40 <BSP_IO_WritePin>
}
 80013c4:	bf00      	nop
 80013c6:	3720      	adds	r7, #32
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	080049b0 	.word	0x080049b0
 80013d4:	48000400 	.word	0x48000400

080013d8 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 80013dc:	4812      	ldr	r0, [pc, #72]	; (8001428 <I2C2_Init+0x50>)
 80013de:	f001 fcc6 	bl	8002d6e <HAL_I2C_GetState>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d11d      	bne.n	8001424 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <I2C2_Init+0x50>)
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <I2C2_Init+0x54>)
 80013ec:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <I2C2_Init+0x50>)
 80013f0:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <I2C2_Init+0x58>)
 80013f2:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <I2C2_Init+0x50>)
 80013f6:	2270      	movs	r2, #112	; 0x70
 80013f8:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <I2C2_Init+0x50>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <I2C2_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <I2C2_Init+0x50>)
 8001408:	22ff      	movs	r2, #255	; 0xff
 800140a:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <I2C2_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <I2C2_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <I2C2_Init+0x50>)
 800141a:	f000 f80b 	bl	8001434 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 800141e:	4802      	ldr	r0, [pc, #8]	; (8001428 <I2C2_Init+0x50>)
 8001420:	f001 f89e 	bl	8002560 <HAL_I2C_Init>
  }
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200000a8 	.word	0x200000a8
 800142c:	40005800 	.word	0x40005800
 8001430:	40403e5d 	.word	0x40403e5d

08001434 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0ae      	sub	sp, #184	; 0xb8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a37      	ldr	r2, [pc, #220]	; (8001520 <I2C2_MspInit+0xec>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d168      	bne.n	8001518 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 800144a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800144e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fda9 	bl	8003fac <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800145a:	4b32      	ldr	r3, [pc, #200]	; (8001524 <I2C2_MspInit+0xf0>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a31      	ldr	r2, [pc, #196]	; (8001524 <I2C2_MspInit+0xf0>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <I2C2_MspInit+0xf0>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <I2C2_MspInit+0xf0>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <I2C2_MspInit+0xf0>)
 8001478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b29      	ldr	r3, [pc, #164]	; (8001524 <I2C2_MspInit+0xf0>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 800148a:	2310      	movs	r3, #16
 800148c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001490:	2312      	movs	r3, #18
 8001492:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8001496:	2301      	movs	r3, #1
 8001498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 80014a2:	2304      	movs	r3, #4
 80014a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 80014a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014ac:	4619      	mov	r1, r3
 80014ae:	481e      	ldr	r0, [pc, #120]	; (8001528 <I2C2_MspInit+0xf4>)
 80014b0:	f000 fdba 	bl	8002028 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 80014b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 80014bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014c0:	4619      	mov	r1, r3
 80014c2:	481a      	ldr	r0, [pc, #104]	; (800152c <I2C2_MspInit+0xf8>)
 80014c4:	f000 fdb0 	bl	8002028 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <I2C2_MspInit+0xf0>)
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	4a15      	ldr	r2, [pc, #84]	; (8001524 <I2C2_MspInit+0xf0>)
 80014ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d2:	6593      	str	r3, [r2, #88]	; 0x58
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <I2C2_MspInit+0xf0>)
 80014d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <I2C2_MspInit+0xf0>)
 80014e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e4:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <I2C2_MspInit+0xf0>)
 80014e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014ea:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <I2C2_MspInit+0xf0>)
 80014ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <I2C2_MspInit+0xf0>)
 80014f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80014f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2021      	movs	r0, #33	; 0x21
 80014fe:	f000 fd4e 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8001502:	2021      	movs	r0, #33	; 0x21
 8001504:	f000 fd67 	bl	8001fd6 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	2022      	movs	r0, #34	; 0x22
 800150e:	f000 fd46 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8001512:	2022      	movs	r0, #34	; 0x22
 8001514:	f000 fd5f 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  }
}
 8001518:	bf00      	nop
 800151a:	37b8      	adds	r7, #184	; 0xb8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40005800 	.word	0x40005800
 8001524:	40021000 	.word	0x40021000
 8001528:	48001c00 	.word	0x48001c00
 800152c:	48000400 	.word	0x48000400

08001530 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8001534:	4806      	ldr	r0, [pc, #24]	; (8001550 <I2C2_DeInit+0x20>)
 8001536:	f001 fc1a 	bl	8002d6e <HAL_I2C_GetState>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <I2C2_DeInit+0x20>)
 8001542:	f001 f89c 	bl	800267e <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 8001546:	4802      	ldr	r0, [pc, #8]	; (8001550 <I2C2_DeInit+0x20>)
 8001548:	f000 f804 	bl	8001554 <I2C2_MspDeInit>
  }
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200000a8 	.word	0x200000a8

08001554 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <I2C2_MspDeInit+0x8c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d138      	bne.n	80015d8 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8001566:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <I2C2_MspDeInit+0x90>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	4a1e      	ldr	r2, [pc, #120]	; (80015e4 <I2C2_MspDeInit+0x90>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <I2C2_MspDeInit+0x90>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <I2C2_MspDeInit+0x90>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <I2C2_MspDeInit+0x90>)
 8001584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <I2C2_MspDeInit+0x90>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8001596:	2110      	movs	r1, #16
 8001598:	4813      	ldr	r0, [pc, #76]	; (80015e8 <I2C2_MspDeInit+0x94>)
 800159a:	f000 fed7 	bl	800234c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 800159e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a2:	4812      	ldr	r0, [pc, #72]	; (80015ec <I2C2_MspDeInit+0x98>)
 80015a4:	f000 fed2 	bl	800234c <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <I2C2_MspDeInit+0x90>)
 80015aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <I2C2_MspDeInit+0x90>)
 80015ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b2:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <I2C2_MspDeInit+0x90>)
 80015b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <I2C2_MspDeInit+0x90>)
 80015ba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015be:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <I2C2_MspDeInit+0x90>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <I2C2_MspDeInit+0x90>)
 80015c6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015ca:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 80015cc:	2021      	movs	r0, #33	; 0x21
 80015ce:	f000 fd10 	bl	8001ff2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 80015d2:	2022      	movs	r0, #34	; 0x22
 80015d4:	f000 fd0d 	bl	8001ff2 <HAL_NVIC_DisableIRQ>
  }
}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40005800 	.word	0x40005800
 80015e4:	40021000 	.word	0x40021000
 80015e8:	48001c00 	.word	0x48001c00
 80015ec:	48000400 	.word	0x48000400

080015f0 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af04      	add	r7, sp, #16
 80015f6:	4604      	mov	r4, r0
 80015f8:	4608      	mov	r0, r1
 80015fa:	4611      	mov	r1, r2
 80015fc:	461a      	mov	r2, r3
 80015fe:	4623      	mov	r3, r4
 8001600:	80fb      	strh	r3, [r7, #6]
 8001602:	4603      	mov	r3, r0
 8001604:	80bb      	strh	r3, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	807b      	strh	r3, [r7, #2]
 800160a:	4613      	mov	r3, r2
 800160c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001612:	b672      	cpsid	i
}
 8001614:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <I2C2_WriteData+0x5c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	8878      	ldrh	r0, [r7, #2]
 800161c:	88ba      	ldrh	r2, [r7, #4]
 800161e:	88f9      	ldrh	r1, [r7, #6]
 8001620:	9302      	str	r3, [sp, #8]
 8001622:	2301      	movs	r3, #1
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	1c7b      	adds	r3, r7, #1
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	4603      	mov	r3, r0
 800162c:	4808      	ldr	r0, [pc, #32]	; (8001650 <I2C2_WriteData+0x60>)
 800162e:	f001 f869 	bl	8002704 <HAL_I2C_Mem_Write>
 8001632:	4603      	mov	r3, r0
 8001634:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001636:	b662      	cpsie	i
}
 8001638:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8001640:	f000 f890 	bl	8001764 <I2C2_Error>
  }
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	20000078 	.word	0x20000078
 8001650:	200000a8 	.word	0x200000a8

08001654 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af04      	add	r7, sp, #16
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
 800165e:	460b      	mov	r3, r1
 8001660:	80bb      	strh	r3, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800166a:	2300      	movs	r3, #0
 800166c:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800166e:	b672      	cpsid	i
}
 8001670:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <I2C2_ReadData+0x60>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	8878      	ldrh	r0, [r7, #2]
 8001678:	88ba      	ldrh	r2, [r7, #4]
 800167a:	88f9      	ldrh	r1, [r7, #6]
 800167c:	9302      	str	r3, [sp, #8]
 800167e:	2301      	movs	r3, #1
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	f107 030e 	add.w	r3, r7, #14
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	4603      	mov	r3, r0
 800168a:	480b      	ldr	r0, [pc, #44]	; (80016b8 <I2C2_ReadData+0x64>)
 800168c:	f001 f94e 	bl	800292c <HAL_I2C_Mem_Read>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001694:	b662      	cpsie	i
}
 8001696:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800169e:	f000 f861 	bl	8001764 <I2C2_Error>
    HAL_Delay(200);
 80016a2:	20c8      	movs	r0, #200	; 0xc8
 80016a4:	f000 fb58 	bl	8001d58 <HAL_Delay>
  }

  return value;
 80016a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000078 	.word	0x20000078
 80016b8:	200000a8 	.word	0x200000a8

080016bc <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 80016d4:	88f9      	ldrh	r1, [r7, #6]
 80016d6:	2332      	movs	r3, #50	; 0x32
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	480a      	ldr	r0, [pc, #40]	; (8001704 <I2C2_isDeviceReady+0x48>)
 80016dc:	f001 fa40 	bl	8002b60 <HAL_I2C_IsDeviceReady>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80016e4:	b662      	cpsie	i
}
 80016e6:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80016ee:	f000 f839 	bl	8001764 <I2C2_Error>
    HAL_Delay(200);
 80016f2:	20c8      	movs	r0, #200	; 0xc8
 80016f4:	f000 fb30 	bl	8001d58 <HAL_Delay>
  }

  return value;
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200000a8 	.word	0x200000a8

08001708 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af04      	add	r7, sp, #16
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	4603      	mov	r3, r0
 8001712:	81fb      	strh	r3, [r7, #14]
 8001714:	460b      	mov	r3, r1
 8001716:	81bb      	strh	r3, [r7, #12]
 8001718:	4613      	mov	r3, r2
 800171a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <I2C2_ReadBuffer+0x54>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	8978      	ldrh	r0, [r7, #10]
 800172a:	89ba      	ldrh	r2, [r7, #12]
 800172c:	89f9      	ldrh	r1, [r7, #14]
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	8c3b      	ldrh	r3, [r7, #32]
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	4603      	mov	r3, r0
 800173a:	4809      	ldr	r0, [pc, #36]	; (8001760 <I2C2_ReadBuffer+0x58>)
 800173c:	f001 f8f6 	bl	800292c <HAL_I2C_Mem_Read>
 8001740:	4603      	mov	r3, r0
 8001742:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8001744:	b662      	cpsie	i
}
 8001746:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8001748:	7dfb      	ldrb	r3, [r7, #23]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800174e:	f000 f809 	bl	8001764 <I2C2_Error>
  }

  return status;
 8001752:	7dfb      	ldrb	r3, [r7, #23]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000078 	.word	0x20000078
 8001760:	200000a8 	.word	0x200000a8

08001764 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8001768:	f7ff fde5 	bl	8001336 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 800176c:	4803      	ldr	r0, [pc, #12]	; (800177c <I2C2_Error+0x18>)
 800176e:	f000 ff86 	bl	800267e <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 8001772:	f7ff fe31 	bl	80013d8 <I2C2_Init>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200000a8 	.word	0x200000a8

08001780 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8001784:	f7ff fe28 	bl	80013d8 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8001788:	2104      	movs	r1, #4
 800178a:	2084      	movs	r0, #132	; 0x84
 800178c:	f7ff ff96 	bl	80016bc <I2C2_isDeviceReady>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 8001796:	f7ff fdce 	bl	8001336 <BSP_ErrorHandler>
  }
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <MFX_IO_DeInit+0x6c>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	4a18      	ldr	r2, [pc, #96]	; (800180c <MFX_IO_DeInit+0x6c>)
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <MFX_IO_DeInit+0x6c>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80017be:	2340      	movs	r3, #64	; 0x40
 80017c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80017ca:	2302      	movs	r3, #2
 80017cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	4619      	mov	r1, r3
 80017d4:	480e      	ldr	r0, [pc, #56]	; (8001810 <MFX_IO_DeInit+0x70>)
 80017d6:	f000 fc27 	bl	8002028 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80017da:	2017      	movs	r0, #23
 80017dc:	f000 fc09 	bl	8001ff2 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MFX_IO_DeInit+0x6c>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a09      	ldr	r2, [pc, #36]	; (800180c <MFX_IO_DeInit+0x6c>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MFX_IO_DeInit+0x6c>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 80017f8:	2120      	movs	r1, #32
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <MFX_IO_DeInit+0x74>)
 80017fc:	f000 fda6 	bl	800234c <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8001800:	f7ff fe96 	bl	8001530 <I2C2_DeInit>
}
 8001804:	bf00      	nop
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000
 8001810:	48001c00 	.word	0x48001c00
 8001814:	48000800 	.word	0x48000800

08001818 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <MFX_IO_ITConfig+0x54>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <MFX_IO_ITConfig+0x54>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <MFX_IO_ITConfig+0x54>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8001836:	2320      	movs	r3, #32
 8001838:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8001842:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001846:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <MFX_IO_ITConfig+0x58>)
 800184e:	f000 fbeb 	bl	8002028 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8001852:	220f      	movs	r2, #15
 8001854:	210f      	movs	r1, #15
 8001856:	2017      	movs	r0, #23
 8001858:	f000 fba1 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800185c:	2017      	movs	r0, #23
 800185e:	f000 fbba 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	48000800 	.word	0x48000800

08001874 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MFX_IO_EnableWakeupPin+0x40>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <MFX_IO_EnableWakeupPin+0x40>)
 8001880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MFX_IO_EnableWakeupPin+0x40>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8001892:	2340      	movs	r3, #64	; 0x40
 8001894:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189a:	2302      	movs	r3, #2
 800189c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	4619      	mov	r1, r3
 80018a6:	4804      	ldr	r0, [pc, #16]	; (80018b8 <MFX_IO_EnableWakeupPin+0x44>)
 80018a8:	f000 fbbe 	bl	8002028 <HAL_GPIO_Init>
}
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48001c00 	.word	0x48001c00

080018bc <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	2140      	movs	r1, #64	; 0x40
 80018c4:	4806      	ldr	r0, [pc, #24]	; (80018e0 <MFX_IO_Wakeup+0x24>)
 80018c6:	f000 fe33 	bl	8002530 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f000 fa44 	bl	8001d58 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2140      	movs	r1, #64	; 0x40
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <MFX_IO_Wakeup+0x24>)
 80018d6:	f000 fe2b 	bl	8002530 <HAL_GPIO_WritePin>
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	48001c00 	.word	0x48001c00

080018e4 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
 80018ee:	460b      	mov	r3, r1
 80018f0:	717b      	strb	r3, [r7, #5]
 80018f2:	4613      	mov	r3, r2
 80018f4:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 80018f6:	797b      	ldrb	r3, [r7, #5]
 80018f8:	b299      	uxth	r1, r3
 80018fa:	793b      	ldrb	r3, [r7, #4]
 80018fc:	88f8      	ldrh	r0, [r7, #6]
 80018fe:	2201      	movs	r2, #1
 8001900:	f7ff fe76 	bl	80015f0 <I2C2_WriteData>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	460a      	mov	r2, r1
 8001916:	80fb      	strh	r3, [r7, #6]
 8001918:	4613      	mov	r3, r2
 800191a:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800191c:	797b      	ldrb	r3, [r7, #5]
 800191e:	b299      	uxth	r1, r3
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	2201      	movs	r2, #1
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe95 	bl	8001654 <I2C2_ReadData>
 800192a:	4603      	mov	r3, r0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af02      	add	r7, sp, #8
 800193a:	60ba      	str	r2, [r7, #8]
 800193c:	461a      	mov	r2, r3
 800193e:	4603      	mov	r3, r0
 8001940:	81fb      	strh	r3, [r7, #14]
 8001942:	460b      	mov	r3, r1
 8001944:	737b      	strb	r3, [r7, #13]
 8001946:	4613      	mov	r3, r2
 8001948:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800194a:	7b7b      	ldrb	r3, [r7, #13]
 800194c:	b299      	uxth	r1, r3
 800194e:	89f8      	ldrh	r0, [r7, #14]
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2201      	movs	r2, #1
 8001958:	f7ff fed6 	bl	8001708 <I2C2_ReadBuffer>
 800195c:	4603      	mov	r3, r0
 800195e:	b29b      	uxth	r3, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f9f1 	bl	8001d58 <HAL_Delay>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <BSP_IO_Init+0x78>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d128      	bne.n	80019e8 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <BSP_IO_Init+0x7c>)
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2084      	movs	r0, #132	; 0x84
 800199c:	4798      	blx	r3

    HAL_Delay(10);
 800199e:	200a      	movs	r0, #10
 80019a0:	f000 f9da 	bl	8001d58 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <BSP_IO_Init+0x80>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2084      	movs	r0, #132	; 0x84
 80019aa:	4798      	blx	r3
 80019ac:	4603      	mov	r3, r0
 80019ae:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	2b7b      	cmp	r3, #123	; 0x7b
 80019b4:	d002      	beq.n	80019bc <BSP_IO_Init+0x3c>
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	2b79      	cmp	r3, #121	; 0x79
 80019ba:	d117      	bne.n	80019ec <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <BSP_IO_Init+0x78>)
 80019be:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <BSP_IO_Init+0x80>)
 80019c0:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <BSP_IO_Init+0x78>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00f      	beq.n	80019ec <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <BSP_IO_Init+0x78>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2084      	movs	r0, #132	; 0x84
 80019d4:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <BSP_IO_Init+0x78>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4909      	ldr	r1, [pc, #36]	; (8001a04 <BSP_IO_Init+0x84>)
 80019de:	2084      	movs	r0, #132	; 0x84
 80019e0:	4798      	blx	r3

        ret = IO_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	71fb      	strb	r3, [r7, #7]
 80019e6:	e001      	b.n	80019ec <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 80019e8:	2303      	movs	r3, #3
 80019ea:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 80019ec:	79fb      	ldrb	r3, [r7, #7]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200000fc 	.word	0x200000fc
 80019fc:	2000002c 	.word	0x2000002c
 8001a00:	20000000 	.word	0x20000000
 8001a04:	000301ff 	.word	0x000301ff

08001a08 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <BSP_IO_ConfigPin+0x30>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <BSP_IO_ConfigPin+0x34>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	78fa      	ldrb	r2, [r7, #3]
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	2084      	movs	r0, #132	; 0x84
 8001a2c:	4798      	blx	r3

  return IO_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	000301ff 	.word	0x000301ff
 8001a3c:	200000fc 	.word	0x200000fc

08001a40 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <BSP_IO_WritePin+0x30>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <BSP_IO_WritePin+0x34>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	78fa      	ldrb	r2, [r7, #3]
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	2084      	movs	r0, #132	; 0x84
 8001a64:	4798      	blx	r3

}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	000301ff 	.word	0x000301ff
 8001a74:	200000fc 	.word	0x200000fc

08001a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a7c:	f000 f8f7 	bl	8001c6e <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED1);
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff fc5b 	bl	800133c <BSP_LED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a86:	f000 f811 	bl	8001aac <SystemClock_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	BSP_IO_WritePin(IO1_PIN_4, GPIO_PIN_RESET);
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	2010      	movs	r0, #16
 8001a8e:	f7ff ffd7 	bl	8001a40 <BSP_IO_WritePin>
	HAL_Delay(500);
 8001a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a96:	f000 f95f 	bl	8001d58 <HAL_Delay>
	BSP_IO_WritePin(IO1_PIN_4, GPIO_PIN_SET);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2010      	movs	r0, #16
 8001a9e:	f7ff ffcf 	bl	8001a40 <BSP_IO_WritePin>
	HAL_Delay(500);
 8001aa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aa6:	f000 f957 	bl	8001d58 <HAL_Delay>
	BSP_IO_WritePin(IO1_PIN_4, GPIO_PIN_RESET);
 8001aaa:	e7ee      	b.n	8001a8a <main+0x12>

08001aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b096      	sub	sp, #88	; 0x58
 8001ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	2244      	movs	r2, #68	; 0x44
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 ff64 	bl	8004988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ace:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ad2:	f001 fc0f 	bl	80032f4 <HAL_PWREx_ControlVoltageScaling>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001adc:	f000 f838 	bl	8001b50 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001aec:	2390      	movs	r3, #144	; 0x90
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af0:	2302      	movs	r3, #2
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001af4:	2301      	movs	r3, #1
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001af8:	2302      	movs	r3, #2
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001afc:	2308      	movs	r3, #8
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8001b08:	2306      	movs	r3, #6
 8001b0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 fc45 	bl	80033a0 <HAL_RCC_OscConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001b1c:	f000 f818 	bl	8001b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b20:	230f      	movs	r3, #15
 8001b22:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b24:	2303      	movs	r3, #3
 8001b26:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b34:	463b      	mov	r3, r7
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 f84b 	bl	8003bd4 <HAL_RCC_ClockConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b44:	f000 f804 	bl	8001b50 <Error_Handler>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	3758      	adds	r7, #88	; 0x58
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b54:	b672      	cpsid	i
}
 8001b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <Error_Handler+0x8>
	...

08001b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_MspInit+0x44>)
 8001b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b66:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_MspInit+0x44>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_MspInit+0x44>)
 8001b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_MspInit+0x44>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_MspInit+0x44>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6593      	str	r3, [r2, #88]	; 0x58
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_MspInit+0x44>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <NMI_Handler+0x4>

08001baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <HardFault_Handler+0x4>

08001bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <MemManage_Handler+0x4>

08001bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <BusFault_Handler+0x4>

08001bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <UsageFault_Handler+0x4>

08001bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf0:	f000 f892 	bl	8001d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <SystemInit+0x20>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <SystemInit+0x20>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c20:	f7ff ffea 	bl	8001bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c24:	480c      	ldr	r0, [pc, #48]	; (8001c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c26:	490d      	ldr	r1, [pc, #52]	; (8001c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <LoopForever+0xe>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c2c:	e002      	b.n	8001c34 <LoopCopyDataInit>

08001c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c32:	3304      	adds	r3, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c38:	d3f9      	bcc.n	8001c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c3c:	4c0a      	ldr	r4, [pc, #40]	; (8001c68 <LoopForever+0x16>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c40:	e001      	b.n	8001c46 <LoopFillZerobss>

08001c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c44:	3204      	adds	r2, #4

08001c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c48:	d3fb      	bcc.n	8001c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f002 fe79 	bl	8004940 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c4e:	f7ff ff13 	bl	8001a78 <main>

08001c52 <LoopForever>:

LoopForever:
    b LoopForever
 8001c52:	e7fe      	b.n	8001c52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c5c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001c60:	080049fc 	.word	0x080049fc
  ldr r2, =_sbss
 8001c64:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001c68:	20000104 	.word	0x20000104

08001c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <ADC1_2_IRQHandler>

08001c6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f000 f985 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f000 f80e 	bl	8001ca0 <HAL_InitTick>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	e001      	b.n	8001c94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c90:	f7ff ff64 	bl	8001b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c94:	79fb      	ldrb	r3, [r7, #7]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_InitTick+0x6c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d023      	beq.n	8001cfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_InitTick+0x70>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_InitTick+0x6c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f99f 	bl	800200e <HAL_SYSTICK_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10f      	bne.n	8001cf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b0f      	cmp	r3, #15
 8001cda:	d809      	bhi.n	8001cf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f000 f95b 	bl	8001f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_InitTick+0x74>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e007      	b.n	8001d00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e004      	b.n	8001d00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	e001      	b.n	8001d00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000084 	.word	0x20000084
 8001d10:	2000007c 	.word	0x2000007c
 8001d14:	20000080 	.word	0x20000080

08001d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_IncTick+0x20>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_IncTick+0x24>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_IncTick+0x24>)
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000084 	.word	0x20000084
 8001d3c:	20000100 	.word	0x20000100

08001d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <HAL_GetTick+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000100 	.word	0x20000100

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff ffee 	bl	8001d40 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d005      	beq.n	8001d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_Delay+0x44>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d7e:	bf00      	nop
 8001d80:	f7ff ffde 	bl	8001d40 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8f7      	bhi.n	8001d80 <HAL_Delay+0x28>
  {
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000084 	.word	0x20000084

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4907      	ldr	r1, [pc, #28]	; (8001e3c <__NVIC_EnableIRQ+0x38>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db12      	blt.n	8001e78 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	490a      	ldr	r1, [pc, #40]	; (8001e84 <__NVIC_DisableIRQ+0x44>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	2001      	movs	r0, #1
 8001e62:	fa00 f202 	lsl.w	r2, r0, r2
 8001e66:	3320      	adds	r3, #32
 8001e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e6c:	f3bf 8f4f 	dsb	sy
}
 8001e70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e72:	f3bf 8f6f 	isb	sy
}
 8001e76:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	4313      	orrs	r3, r2
         );
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f54:	d301      	bcc.n	8001f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00f      	b.n	8001f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <SysTick_Config+0x40>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f62:	210f      	movs	r1, #15
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f7ff ff8e 	bl	8001e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <SysTick_Config+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <SysTick_Config+0x40>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010

08001f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff05 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb0:	f7ff ff1a 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001fb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	6978      	ldr	r0, [r7, #20]
 8001fbc:	f7ff ff8e 	bl	8001edc <NVIC_EncodePriority>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff5d 	bl	8001e88 <__NVIC_SetPriority>
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff0d 	bl	8001e04 <__NVIC_EnableIRQ>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff1d 	bl	8001e40 <__NVIC_DisableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ff94 	bl	8001f44 <SysTick_Config>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002036:	e166      	b.n	8002306 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8158 	beq.w	8002300 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d005      	beq.n	8002068 <HAL_GPIO_Init+0x40>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d130      	bne.n	80020ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800209e:	2201      	movs	r2, #1
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	f003 0201 	and.w	r2, r3, #1
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d017      	beq.n	8002106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d123      	bne.n	800215a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	6939      	ldr	r1, [r7, #16]
 8002156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2203      	movs	r2, #3
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0203 	and.w	r2, r3, #3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80b2 	beq.w	8002300 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219c:	4b61      	ldr	r3, [pc, #388]	; (8002324 <HAL_GPIO_Init+0x2fc>)
 800219e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a0:	4a60      	ldr	r2, [pc, #384]	; (8002324 <HAL_GPIO_Init+0x2fc>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6613      	str	r3, [r2, #96]	; 0x60
 80021a8:	4b5e      	ldr	r3, [pc, #376]	; (8002324 <HAL_GPIO_Init+0x2fc>)
 80021aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021b4:	4a5c      	ldr	r2, [pc, #368]	; (8002328 <HAL_GPIO_Init+0x300>)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021de:	d02b      	beq.n	8002238 <HAL_GPIO_Init+0x210>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a52      	ldr	r2, [pc, #328]	; (800232c <HAL_GPIO_Init+0x304>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d025      	beq.n	8002234 <HAL_GPIO_Init+0x20c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a51      	ldr	r2, [pc, #324]	; (8002330 <HAL_GPIO_Init+0x308>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d01f      	beq.n	8002230 <HAL_GPIO_Init+0x208>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a50      	ldr	r2, [pc, #320]	; (8002334 <HAL_GPIO_Init+0x30c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d019      	beq.n	800222c <HAL_GPIO_Init+0x204>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a4f      	ldr	r2, [pc, #316]	; (8002338 <HAL_GPIO_Init+0x310>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d013      	beq.n	8002228 <HAL_GPIO_Init+0x200>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a4e      	ldr	r2, [pc, #312]	; (800233c <HAL_GPIO_Init+0x314>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00d      	beq.n	8002224 <HAL_GPIO_Init+0x1fc>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a4d      	ldr	r2, [pc, #308]	; (8002340 <HAL_GPIO_Init+0x318>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d007      	beq.n	8002220 <HAL_GPIO_Init+0x1f8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a4c      	ldr	r2, [pc, #304]	; (8002344 <HAL_GPIO_Init+0x31c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_GPIO_Init+0x1f4>
 8002218:	2307      	movs	r3, #7
 800221a:	e00e      	b.n	800223a <HAL_GPIO_Init+0x212>
 800221c:	2308      	movs	r3, #8
 800221e:	e00c      	b.n	800223a <HAL_GPIO_Init+0x212>
 8002220:	2306      	movs	r3, #6
 8002222:	e00a      	b.n	800223a <HAL_GPIO_Init+0x212>
 8002224:	2305      	movs	r3, #5
 8002226:	e008      	b.n	800223a <HAL_GPIO_Init+0x212>
 8002228:	2304      	movs	r3, #4
 800222a:	e006      	b.n	800223a <HAL_GPIO_Init+0x212>
 800222c:	2303      	movs	r3, #3
 800222e:	e004      	b.n	800223a <HAL_GPIO_Init+0x212>
 8002230:	2302      	movs	r3, #2
 8002232:	e002      	b.n	800223a <HAL_GPIO_Init+0x212>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_GPIO_Init+0x212>
 8002238:	2300      	movs	r3, #0
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	f002 0203 	and.w	r2, r2, #3
 8002240:	0092      	lsls	r2, r2, #2
 8002242:	4093      	lsls	r3, r2
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800224a:	4937      	ldr	r1, [pc, #220]	; (8002328 <HAL_GPIO_Init+0x300>)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3302      	adds	r3, #2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002258:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <HAL_GPIO_Init+0x320>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800227c:	4a32      	ldr	r2, [pc, #200]	; (8002348 <HAL_GPIO_Init+0x320>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <HAL_GPIO_Init+0x320>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022a6:	4a28      	ldr	r2, [pc, #160]	; (8002348 <HAL_GPIO_Init+0x320>)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <HAL_GPIO_Init+0x320>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_GPIO_Init+0x320>)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <HAL_GPIO_Init+0x320>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	43db      	mvns	r3, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022fa:	4a13      	ldr	r2, [pc, #76]	; (8002348 <HAL_GPIO_Init+0x320>)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	3301      	adds	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	f47f ae91 	bne.w	8002038 <HAL_GPIO_Init+0x10>
  }
}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40021000 	.word	0x40021000
 8002328:	40010000 	.word	0x40010000
 800232c:	48000400 	.word	0x48000400
 8002330:	48000800 	.word	0x48000800
 8002334:	48000c00 	.word	0x48000c00
 8002338:	48001000 	.word	0x48001000
 800233c:	48001400 	.word	0x48001400
 8002340:	48001800 	.word	0x48001800
 8002344:	48001c00 	.word	0x48001c00
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800235a:	e0c9      	b.n	80024f0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800235c:	2201      	movs	r2, #1
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80bc 	beq.w	80024ea <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002372:	4a66      	ldr	r2, [pc, #408]	; (800250c <HAL_GPIO_DeInit+0x1c0>)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800239a:	d02b      	beq.n	80023f4 <HAL_GPIO_DeInit+0xa8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a5c      	ldr	r2, [pc, #368]	; (8002510 <HAL_GPIO_DeInit+0x1c4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d025      	beq.n	80023f0 <HAL_GPIO_DeInit+0xa4>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a5b      	ldr	r2, [pc, #364]	; (8002514 <HAL_GPIO_DeInit+0x1c8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d01f      	beq.n	80023ec <HAL_GPIO_DeInit+0xa0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a5a      	ldr	r2, [pc, #360]	; (8002518 <HAL_GPIO_DeInit+0x1cc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d019      	beq.n	80023e8 <HAL_GPIO_DeInit+0x9c>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a59      	ldr	r2, [pc, #356]	; (800251c <HAL_GPIO_DeInit+0x1d0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_GPIO_DeInit+0x98>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_GPIO_DeInit+0x1d4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00d      	beq.n	80023e0 <HAL_GPIO_DeInit+0x94>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a57      	ldr	r2, [pc, #348]	; (8002524 <HAL_GPIO_DeInit+0x1d8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d007      	beq.n	80023dc <HAL_GPIO_DeInit+0x90>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a56      	ldr	r2, [pc, #344]	; (8002528 <HAL_GPIO_DeInit+0x1dc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <HAL_GPIO_DeInit+0x8c>
 80023d4:	2307      	movs	r3, #7
 80023d6:	e00e      	b.n	80023f6 <HAL_GPIO_DeInit+0xaa>
 80023d8:	2308      	movs	r3, #8
 80023da:	e00c      	b.n	80023f6 <HAL_GPIO_DeInit+0xaa>
 80023dc:	2306      	movs	r3, #6
 80023de:	e00a      	b.n	80023f6 <HAL_GPIO_DeInit+0xaa>
 80023e0:	2305      	movs	r3, #5
 80023e2:	e008      	b.n	80023f6 <HAL_GPIO_DeInit+0xaa>
 80023e4:	2304      	movs	r3, #4
 80023e6:	e006      	b.n	80023f6 <HAL_GPIO_DeInit+0xaa>
 80023e8:	2303      	movs	r3, #3
 80023ea:	e004      	b.n	80023f6 <HAL_GPIO_DeInit+0xaa>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e002      	b.n	80023f6 <HAL_GPIO_DeInit+0xaa>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_GPIO_DeInit+0xaa>
 80023f4:	2300      	movs	r3, #0
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	f002 0203 	and.w	r2, r2, #3
 80023fc:	0092      	lsls	r2, r2, #2
 80023fe:	4093      	lsls	r3, r2
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	429a      	cmp	r2, r3
 8002404:	d132      	bne.n	800246c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002406:	4b49      	ldr	r3, [pc, #292]	; (800252c <HAL_GPIO_DeInit+0x1e0>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	4947      	ldr	r1, [pc, #284]	; (800252c <HAL_GPIO_DeInit+0x1e0>)
 8002410:	4013      	ands	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002414:	4b45      	ldr	r3, [pc, #276]	; (800252c <HAL_GPIO_DeInit+0x1e0>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	4943      	ldr	r1, [pc, #268]	; (800252c <HAL_GPIO_DeInit+0x1e0>)
 800241e:	4013      	ands	r3, r2
 8002420:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002422:	4b42      	ldr	r3, [pc, #264]	; (800252c <HAL_GPIO_DeInit+0x1e0>)
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	4940      	ldr	r1, [pc, #256]	; (800252c <HAL_GPIO_DeInit+0x1e0>)
 800242c:	4013      	ands	r3, r2
 800242e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002430:	4b3e      	ldr	r3, [pc, #248]	; (800252c <HAL_GPIO_DeInit+0x1e0>)
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	493c      	ldr	r1, [pc, #240]	; (800252c <HAL_GPIO_DeInit+0x1e0>)
 800243a:	4013      	ands	r3, r2
 800243c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800244e:	4a2f      	ldr	r2, [pc, #188]	; (800250c <HAL_GPIO_DeInit+0x1c0>)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	43da      	mvns	r2, r3
 800245e:	482b      	ldr	r0, [pc, #172]	; (800250c <HAL_GPIO_DeInit+0x1c0>)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	400a      	ands	r2, r1
 8002466:	3302      	adds	r3, #2
 8002468:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2103      	movs	r1, #3
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	08da      	lsrs	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3208      	adds	r2, #8
 8002488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	08d2      	lsrs	r2, r2, #3
 80024a0:	4019      	ands	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3208      	adds	r2, #8
 80024a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2103      	movs	r1, #3
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	401a      	ands	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	2101      	movs	r1, #1
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	401a      	ands	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2103      	movs	r1, #3
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	401a      	ands	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f47f af2f 	bne.w	800235c <HAL_GPIO_DeInit+0x10>
  }
}
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40010000 	.word	0x40010000
 8002510:	48000400 	.word	0x48000400
 8002514:	48000800 	.word	0x48000800
 8002518:	48000c00 	.word	0x48000c00
 800251c:	48001000 	.word	0x48001000
 8002520:	48001400 	.word	0x48001400
 8002524:	48001800 	.word	0x48001800
 8002528:	48001c00 	.word	0x48001c00
 800252c:	40010400 	.word	0x40010400

08002530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002540:	787b      	ldrb	r3, [r7, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800254c:	e002      	b.n	8002554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e081      	b.n	8002676 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f8a8 	bl	80026dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2224      	movs	r2, #36	; 0x24
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	e006      	b.n	80025e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d104      	bne.n	80025fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800261c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69d9      	ldr	r1, [r3, #28]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1a      	ldr	r2, [r3, #32]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e021      	b.n	80026d4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f821 	bl	80026f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	4608      	mov	r0, r1
 800270e:	4611      	mov	r1, r2
 8002710:	461a      	mov	r2, r3
 8002712:	4603      	mov	r3, r0
 8002714:	817b      	strh	r3, [r7, #10]
 8002716:	460b      	mov	r3, r1
 8002718:	813b      	strh	r3, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b20      	cmp	r3, #32
 8002728:	f040 80f9 	bne.w	800291e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_I2C_Mem_Write+0x34>
 8002732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0ed      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Mem_Write+0x4e>
 800274e:	2302      	movs	r3, #2
 8002750:	e0e6      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800275a:	f7ff faf1 	bl	8001d40 <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2319      	movs	r3, #25
 8002766:	2201      	movs	r2, #1
 8002768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fbd9 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0d1      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2221      	movs	r2, #33	; 0x21
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2240      	movs	r2, #64	; 0x40
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800279c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027a4:	88f8      	ldrh	r0, [r7, #6]
 80027a6:	893a      	ldrh	r2, [r7, #8]
 80027a8:	8979      	ldrh	r1, [r7, #10]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	4603      	mov	r3, r0
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fae9 	bl	8002d8c <I2C_RequestMemoryWrite>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0a9      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2bff      	cmp	r3, #255	; 0xff
 80027d4:	d90e      	bls.n	80027f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	22ff      	movs	r2, #255	; 0xff
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	8979      	ldrh	r1, [r7, #10]
 80027e4:	2300      	movs	r3, #0
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fd41 	bl	8003274 <I2C_TransferConfig>
 80027f2:	e00f      	b.n	8002814 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	b2da      	uxtb	r2, r3
 8002804:	8979      	ldrh	r1, [r7, #10]
 8002806:	2300      	movs	r3, #0
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fd30 	bl	8003274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fbc3 	bl	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e07b      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d034      	beq.n	80028cc <HAL_I2C_Mem_Write+0x1c8>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	2b00      	cmp	r3, #0
 8002868:	d130      	bne.n	80028cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	2200      	movs	r2, #0
 8002872:	2180      	movs	r1, #128	; 0x80
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fb55 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e04d      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	2bff      	cmp	r3, #255	; 0xff
 800288c:	d90e      	bls.n	80028ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	22ff      	movs	r2, #255	; 0xff
 8002892:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	b2da      	uxtb	r2, r3
 800289a:	8979      	ldrh	r1, [r7, #10]
 800289c:	2300      	movs	r3, #0
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fce5 	bl	8003274 <I2C_TransferConfig>
 80028aa:	e00f      	b.n	80028cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	8979      	ldrh	r1, [r7, #10]
 80028be:	2300      	movs	r3, #0
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fcd4 	bl	8003274 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d19e      	bne.n	8002814 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fba2 	bl	8003024 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e01a      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2220      	movs	r2, #32
 80028f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_I2C_Mem_Write+0x224>)
 80028fe:	400b      	ands	r3, r1
 8002900:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	fe00e800 	.word	0xfe00e800

0800292c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	4608      	mov	r0, r1
 8002936:	4611      	mov	r1, r2
 8002938:	461a      	mov	r2, r3
 800293a:	4603      	mov	r3, r0
 800293c:	817b      	strh	r3, [r7, #10]
 800293e:	460b      	mov	r3, r1
 8002940:	813b      	strh	r3, [r7, #8]
 8002942:	4613      	mov	r3, r2
 8002944:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b20      	cmp	r3, #32
 8002950:	f040 80fd 	bne.w	8002b4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_I2C_Mem_Read+0x34>
 800295a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002966:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0f1      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_I2C_Mem_Read+0x4e>
 8002976:	2302      	movs	r3, #2
 8002978:	e0ea      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002982:	f7ff f9dd 	bl	8001d40 <HAL_GetTick>
 8002986:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2319      	movs	r3, #25
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fac5 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0d5      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2222      	movs	r2, #34	; 0x22
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2240      	movs	r2, #64	; 0x40
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a3a      	ldr	r2, [r7, #32]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029cc:	88f8      	ldrh	r0, [r7, #6]
 80029ce:	893a      	ldrh	r2, [r7, #8]
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	4603      	mov	r3, r0
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fa29 	bl	8002e34 <I2C_RequestMemoryRead>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0ad      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2bff      	cmp	r3, #255	; 0xff
 80029fc:	d90e      	bls.n	8002a1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	22ff      	movs	r2, #255	; 0xff
 8002a02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	8979      	ldrh	r1, [r7, #10]
 8002a0c:	4b52      	ldr	r3, [pc, #328]	; (8002b58 <HAL_I2C_Mem_Read+0x22c>)
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fc2d 	bl	8003274 <I2C_TransferConfig>
 8002a1a:	e00f      	b.n	8002a3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	8979      	ldrh	r1, [r7, #10]
 8002a2e:	4b4a      	ldr	r3, [pc, #296]	; (8002b58 <HAL_I2C_Mem_Read+0x22c>)
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 fc1c 	bl	8003274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a42:	2200      	movs	r2, #0
 8002a44:	2104      	movs	r1, #4
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fa6c 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07c      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d034      	beq.n	8002afc <HAL_I2C_Mem_Read+0x1d0>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d130      	bne.n	8002afc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2180      	movs	r1, #128	; 0x80
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fa3d 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e04d      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2bff      	cmp	r3, #255	; 0xff
 8002abc:	d90e      	bls.n	8002adc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	22ff      	movs	r2, #255	; 0xff
 8002ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	8979      	ldrh	r1, [r7, #10]
 8002acc:	2300      	movs	r3, #0
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fbcd 	bl	8003274 <I2C_TransferConfig>
 8002ada:	e00f      	b.n	8002afc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	8979      	ldrh	r1, [r7, #10]
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fbbc 	bl	8003274 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d19a      	bne.n	8002a3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fa8a 	bl	8003024 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e01a      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_I2C_Mem_Read+0x230>)
 8002b2e:	400b      	ands	r3, r1
 8002b30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
  }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	80002400 	.word	0x80002400
 8002b5c:	fe00e800 	.word	0xfe00e800

08002b60 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	f040 80f1 	bne.w	8002d64 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b90:	d101      	bne.n	8002b96 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0e7      	b.n	8002d66 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_I2C_IsDeviceReady+0x44>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0e0      	b.n	8002d66 <HAL_I2C_IsDeviceReady+0x206>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2224      	movs	r2, #36	; 0x24
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_I2C_IsDeviceReady+0x72>
 8002bc2:	897b      	ldrh	r3, [r7, #10]
 8002bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bd0:	e004      	b.n	8002bdc <HAL_I2C_IsDeviceReady+0x7c>
 8002bd2:	897b      	ldrh	r3, [r7, #10]
 8002bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002be2:	f7ff f8ad 	bl	8001d40 <HAL_GetTick>
 8002be6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	bf0c      	ite	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	2300      	movne	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b10      	cmp	r3, #16
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c14:	e034      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d01a      	beq.n	8002c54 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7ff f88f 	bl	8001d40 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <HAL_I2C_IsDeviceReady+0xd4>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10f      	bne.n	8002c54 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e088      	b.n	8002d66 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c80:	7ffb      	ldrb	r3, [r7, #31]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <HAL_I2C_IsDeviceReady+0x12c>
 8002c86:	7fbb      	ldrb	r3, [r7, #30]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0c4      	beq.n	8002c16 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d01a      	beq.n	8002cd0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2120      	movs	r1, #32
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f93d 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e058      	b.n	8002d66 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e04a      	b.n	8002d66 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2120      	movs	r1, #32
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f922 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e03d      	b.n	8002d66 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2210      	movs	r2, #16
 8002cf0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d118      	bne.n	8002d34 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d10:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2120      	movs	r1, #32
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f901 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e01c      	b.n	8002d66 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2220      	movs	r2, #32
 8002d32:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3301      	adds	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	f63f af3b 	bhi.w	8002bba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
  }
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7c:	b2db      	uxtb	r3, r3
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	817b      	strh	r3, [r7, #10]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	813b      	strh	r3, [r7, #8]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	8979      	ldrh	r1, [r7, #10]
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <I2C_RequestMemoryWrite+0xa4>)
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fa5d 	bl	8003274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	69b9      	ldr	r1, [r7, #24]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f8f0 	bl	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e02c      	b.n	8002e28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd4:	893b      	ldrh	r3, [r7, #8]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	629a      	str	r2, [r3, #40]	; 0x28
 8002dde:	e015      	b.n	8002e0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	69b9      	ldr	r1, [r7, #24]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f8d6 	bl	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e012      	b.n	8002e28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e02:	893b      	ldrh	r3, [r7, #8]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2200      	movs	r2, #0
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f884 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	80002000 	.word	0x80002000

08002e34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	4611      	mov	r1, r2
 8002e40:	461a      	mov	r2, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	817b      	strh	r3, [r7, #10]
 8002e46:	460b      	mov	r3, r1
 8002e48:	813b      	strh	r3, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	8979      	ldrh	r1, [r7, #10]
 8002e54:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <I2C_RequestMemoryRead+0xa4>)
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fa0a 	bl	8003274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f89d 	bl	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e02c      	b.n	8002ece <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d105      	bne.n	8002e86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e7a:	893b      	ldrh	r3, [r7, #8]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
 8002e84:	e015      	b.n	8002eb2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e86:	893b      	ldrh	r3, [r7, #8]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	69b9      	ldr	r1, [r7, #24]
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f883 	bl	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e012      	b.n	8002ece <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea8:	893b      	ldrh	r3, [r7, #8]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2140      	movs	r1, #64	; 0x40
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f831 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	80002000 	.word	0x80002000

08002edc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d103      	bne.n	8002efa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d007      	beq.n	8002f18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	619a      	str	r2, [r3, #24]
  }
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f34:	e022      	b.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d01e      	beq.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3e:	f7fe feff 	bl	8001d40 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d113      	bne.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e00f      	b.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d0cd      	beq.n	8002f36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fb0:	e02c      	b.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f870 	bl	800309c <I2C_IsErrorOccurred>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e02a      	b.n	800301c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d01e      	beq.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fce:	f7fe feb7 	bl	8001d40 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d302      	bcc.n	8002fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d113      	bne.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e007      	b.n	800301c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d1cb      	bne.n	8002fb2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003030:	e028      	b.n	8003084 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f830 	bl	800309c <I2C_IsErrorOccurred>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e026      	b.n	8003094 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003046:	f7fe fe7b 	bl	8001d40 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d113      	bne.n	8003084 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	f043 0220 	orr.w	r2, r3, #32
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b20      	cmp	r3, #32
 8003090:	d1cf      	bne.n	8003032 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d075      	beq.n	80031b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2210      	movs	r2, #16
 80030ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030d0:	e056      	b.n	8003180 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d052      	beq.n	8003180 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030da:	f7fe fe31 	bl	8001d40 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d302      	bcc.n	80030f0 <I2C_IsErrorOccurred+0x54>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d147      	bne.n	8003180 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003102:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800310e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003112:	d12e      	bne.n	8003172 <I2C_IsErrorOccurred+0xd6>
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800311a:	d02a      	beq.n	8003172 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800311c:	7cfb      	ldrb	r3, [r7, #19]
 800311e:	2b20      	cmp	r3, #32
 8003120:	d027      	beq.n	8003172 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003130:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003132:	f7fe fe05 	bl	8001d40 <HAL_GetTick>
 8003136:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003138:	e01b      	b.n	8003172 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800313a:	f7fe fe01 	bl	8001d40 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b19      	cmp	r3, #25
 8003146:	d914      	bls.n	8003172 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b20      	cmp	r3, #32
 800317e:	d1dc      	bne.n	800313a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b20      	cmp	r3, #32
 800318c:	d003      	beq.n	8003196 <I2C_IsErrorOccurred+0xfa>
 800318e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003192:	2b00      	cmp	r3, #0
 8003194:	d09d      	beq.n	80030d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800319a:	2b00      	cmp	r3, #0
 800319c:	d103      	bne.n	80031a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2220      	movs	r2, #32
 80031a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	f043 0304 	orr.w	r3, r3, #4
 80031ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00b      	beq.n	8003200 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	f043 0308 	orr.w	r3, r3, #8
 80031ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01c      	beq.n	8003264 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff fe56 	bl	8002edc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <I2C_IsErrorOccurred+0x1d4>)
 800323c:	400b      	ands	r3, r1
 800323e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	431a      	orrs	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003268:	4618      	mov	r0, r3
 800326a:	3728      	adds	r7, #40	; 0x28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	fe00e800 	.word	0xfe00e800

08003274 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	817b      	strh	r3, [r7, #10]
 8003282:	4613      	mov	r3, r2
 8003284:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003286:	897b      	ldrh	r3, [r7, #10]
 8003288:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800328c:	7a7b      	ldrb	r3, [r7, #9]
 800328e:	041b      	lsls	r3, r3, #16
 8003290:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003294:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	4313      	orrs	r3, r2
 800329e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	0d5b      	lsrs	r3, r3, #21
 80032ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <I2C_TransferConfig+0x60>)
 80032b4:	430b      	orrs	r3, r1
 80032b6:	43db      	mvns	r3, r3
 80032b8:	ea02 0103 	and.w	r1, r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032c6:	bf00      	nop
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	03ff63ff 	.word	0x03ff63ff

080032d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40007000 	.word	0x40007000

080032f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003302:	d130      	bne.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003304:	4b23      	ldr	r3, [pc, #140]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800330c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003310:	d038      	beq.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800331a:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800331c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003320:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2232      	movs	r2, #50	; 0x32
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0c9b      	lsrs	r3, r3, #18
 8003334:	3301      	adds	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003338:	e002      	b.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3b01      	subs	r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334c:	d102      	bne.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x60>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f2      	bne.n	800333a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003360:	d110      	bne.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e00f      	b.n	8003386 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d007      	beq.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800337c:	4a05      	ldr	r2, [pc, #20]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003382:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40007000 	.word	0x40007000
 8003398:	2000007c 	.word	0x2000007c
 800339c:	431bde83 	.word	0x431bde83

080033a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f000 bc08 	b.w	8003bc4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b4:	4b96      	ldr	r3, [pc, #600]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033be:	4b94      	ldr	r3, [pc, #592]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80e4 	beq.w	800359e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <HAL_RCC_OscConfig+0x4c>
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b0c      	cmp	r3, #12
 80033e0:	f040 808b 	bne.w	80034fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	f040 8087 	bne.w	80034fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ec:	4b88      	ldr	r3, [pc, #544]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_OscConfig+0x64>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e3df      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1a      	ldr	r2, [r3, #32]
 8003408:	4b81      	ldr	r3, [pc, #516]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d004      	beq.n	800341e <HAL_RCC_OscConfig+0x7e>
 8003414:	4b7e      	ldr	r3, [pc, #504]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800341c:	e005      	b.n	800342a <HAL_RCC_OscConfig+0x8a>
 800341e:	4b7c      	ldr	r3, [pc, #496]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342a:	4293      	cmp	r3, r2
 800342c:	d223      	bcs.n	8003476 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fd5a 	bl	8003eec <RCC_SetFlashLatencyFromMSIRange>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e3c0      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003442:	4b73      	ldr	r3, [pc, #460]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a72      	ldr	r2, [pc, #456]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003448:	f043 0308 	orr.w	r3, r3, #8
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b70      	ldr	r3, [pc, #448]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	496d      	ldr	r1, [pc, #436]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 800345c:	4313      	orrs	r3, r2
 800345e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003460:	4b6b      	ldr	r3, [pc, #428]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	4968      	ldr	r1, [pc, #416]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]
 8003474:	e025      	b.n	80034c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003476:	4b66      	ldr	r3, [pc, #408]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a65      	ldr	r2, [pc, #404]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 800347c:	f043 0308 	orr.w	r3, r3, #8
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b63      	ldr	r3, [pc, #396]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4960      	ldr	r1, [pc, #384]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003494:	4b5e      	ldr	r3, [pc, #376]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	495b      	ldr	r1, [pc, #364]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fd1a 	bl	8003eec <RCC_SetFlashLatencyFromMSIRange>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e380      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034c2:	f000 fc87 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b51      	ldr	r3, [pc, #324]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	4950      	ldr	r1, [pc, #320]	; (8003614 <HAL_RCC_OscConfig+0x274>)
 80034d4:	5ccb      	ldrb	r3, [r1, r3]
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	fa22 f303 	lsr.w	r3, r2, r3
 80034de:	4a4e      	ldr	r2, [pc, #312]	; (8003618 <HAL_RCC_OscConfig+0x278>)
 80034e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034e2:	4b4e      	ldr	r3, [pc, #312]	; (800361c <HAL_RCC_OscConfig+0x27c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fbda 	bl	8001ca0 <HAL_InitTick>
 80034ec:	4603      	mov	r3, r0
 80034ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d052      	beq.n	800359c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	e364      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d032      	beq.n	8003568 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003502:	4b43      	ldr	r3, [pc, #268]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a42      	ldr	r2, [pc, #264]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800350e:	f7fe fc17 	bl	8001d40 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003516:	f7fe fc13 	bl	8001d40 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e34d      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003528:	4b39      	ldr	r3, [pc, #228]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003534:	4b36      	ldr	r3, [pc, #216]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a35      	ldr	r2, [pc, #212]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 800353a:	f043 0308 	orr.w	r3, r3, #8
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b33      	ldr	r3, [pc, #204]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4930      	ldr	r1, [pc, #192]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003552:	4b2f      	ldr	r3, [pc, #188]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	492b      	ldr	r1, [pc, #172]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003562:	4313      	orrs	r3, r2
 8003564:	604b      	str	r3, [r1, #4]
 8003566:	e01a      	b.n	800359e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003568:	4b29      	ldr	r3, [pc, #164]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a28      	ldr	r2, [pc, #160]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003574:	f7fe fbe4 	bl	8001d40 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800357c:	f7fe fbe0 	bl	8001d40 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e31a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800358e:	4b20      	ldr	r3, [pc, #128]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x1dc>
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800359c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d073      	beq.n	8003692 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_OscConfig+0x21c>
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b0c      	cmp	r3, #12
 80035b4:	d10e      	bne.n	80035d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d10b      	bne.n	80035d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	4b14      	ldr	r3, [pc, #80]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d063      	beq.n	8003690 <HAL_RCC_OscConfig+0x2f0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d15f      	bne.n	8003690 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e2f7      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d106      	bne.n	80035ec <HAL_RCC_OscConfig+0x24c>
 80035de:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a0b      	ldr	r2, [pc, #44]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e025      	b.n	8003638 <HAL_RCC_OscConfig+0x298>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f4:	d114      	bne.n	8003620 <HAL_RCC_OscConfig+0x280>
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a05      	ldr	r2, [pc, #20]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 80035fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b03      	ldr	r3, [pc, #12]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a02      	ldr	r2, [pc, #8]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e013      	b.n	8003638 <HAL_RCC_OscConfig+0x298>
 8003610:	40021000 	.word	0x40021000
 8003614:	080049b4 	.word	0x080049b4
 8003618:	2000007c 	.word	0x2000007c
 800361c:	20000080 	.word	0x20000080
 8003620:	4ba0      	ldr	r3, [pc, #640]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a9f      	ldr	r2, [pc, #636]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b9d      	ldr	r3, [pc, #628]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a9c      	ldr	r2, [pc, #624]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe fb7e 	bl	8001d40 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003648:	f7fe fb7a 	bl	8001d40 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	; 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e2b4      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365a:	4b92      	ldr	r3, [pc, #584]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x2a8>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe fb6a 	bl	8001d40 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7fe fb66 	bl	8001d40 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e2a0      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003682:	4b88      	ldr	r3, [pc, #544]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x2d0>
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d060      	beq.n	8003760 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_OscConfig+0x310>
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d119      	bne.n	80036de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d116      	bne.n	80036de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b0:	4b7c      	ldr	r3, [pc, #496]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_OscConfig+0x328>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e27d      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b76      	ldr	r3, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	4973      	ldr	r1, [pc, #460]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036dc:	e040      	b.n	8003760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d023      	beq.n	800372e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e6:	4b6f      	ldr	r3, [pc, #444]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a6e      	ldr	r2, [pc, #440]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fe fb25 	bl	8001d40 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fe fb21 	bl	8001d40 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e25b      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800370c:	4b65      	ldr	r3, [pc, #404]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b62      	ldr	r3, [pc, #392]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	495f      	ldr	r1, [pc, #380]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
 800372c:	e018      	b.n	8003760 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b5d      	ldr	r3, [pc, #372]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5c      	ldr	r2, [pc, #368]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fe fb01 	bl	8001d40 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003742:	f7fe fafd 	bl	8001d40 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e237      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003754:	4b53      	ldr	r3, [pc, #332]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f0      	bne.n	8003742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d03c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01c      	beq.n	80037ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003774:	4b4b      	ldr	r3, [pc, #300]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377a:	4a4a      	ldr	r2, [pc, #296]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fe fadc 	bl	8001d40 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800378c:	f7fe fad8 	bl	8001d40 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e212      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800379e:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <HAL_RCC_OscConfig+0x3ec>
 80037ac:	e01b      	b.n	80037e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ae:	4b3d      	ldr	r3, [pc, #244]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b4:	4a3b      	ldr	r2, [pc, #236]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fe fabf 	bl	8001d40 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fe fabb 	bl	8001d40 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e1f5      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037d8:	4b32      	ldr	r3, [pc, #200]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ef      	bne.n	80037c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80a6 	beq.w	8003940 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f4:	2300      	movs	r3, #0
 80037f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037f8:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10d      	bne.n	8003820 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	4a26      	ldr	r2, [pc, #152]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380e:	6593      	str	r3, [r2, #88]	; 0x58
 8003810:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381c:	2301      	movs	r3, #1
 800381e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003820:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <HAL_RCC_OscConfig+0x508>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d118      	bne.n	800385e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800382c:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_RCC_OscConfig+0x508>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <HAL_RCC_OscConfig+0x508>)
 8003832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003838:	f7fe fa82 	bl	8001d40 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fe fa7e 	bl	8001d40 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e1b8      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_RCC_OscConfig+0x508>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d108      	bne.n	8003878 <HAL_RCC_OscConfig+0x4d8>
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003876:	e029      	b.n	80038cc <HAL_RCC_OscConfig+0x52c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b05      	cmp	r3, #5
 800387e:	d115      	bne.n	80038ac <HAL_RCC_OscConfig+0x50c>
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	4a07      	ldr	r2, [pc, #28]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a0:	e014      	b.n	80038cc <HAL_RCC_OscConfig+0x52c>
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40007000 	.word	0x40007000
 80038ac:	4b9d      	ldr	r3, [pc, #628]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	4a9c      	ldr	r2, [pc, #624]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038bc:	4b99      	ldr	r3, [pc, #612]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	4a98      	ldr	r2, [pc, #608]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 80038c4:	f023 0304 	bic.w	r3, r3, #4
 80038c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d016      	beq.n	8003902 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe fa34 	bl	8001d40 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fe fa30 	bl	8001d40 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e168      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f2:	4b8c      	ldr	r3, [pc, #560]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0ed      	beq.n	80038dc <HAL_RCC_OscConfig+0x53c>
 8003900:	e015      	b.n	800392e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003902:	f7fe fa1d 	bl	8001d40 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003908:	e00a      	b.n	8003920 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7fe fa19 	bl	8001d40 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	; 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e151      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003920:	4b80      	ldr	r3, [pc, #512]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1ed      	bne.n	800390a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392e:	7ffb      	ldrb	r3, [r7, #31]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d105      	bne.n	8003940 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003934:	4b7b      	ldr	r3, [pc, #492]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	4a7a      	ldr	r2, [pc, #488]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d03c      	beq.n	80039c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01c      	beq.n	800398e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003954:	4b73      	ldr	r3, [pc, #460]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003956:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800395a:	4a72      	ldr	r2, [pc, #456]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fe f9ec 	bl	8001d40 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800396c:	f7fe f9e8 	bl	8001d40 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e122      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800397e:	4b69      	ldr	r3, [pc, #420]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ef      	beq.n	800396c <HAL_RCC_OscConfig+0x5cc>
 800398c:	e01b      	b.n	80039c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800398e:	4b65      	ldr	r3, [pc, #404]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003994:	4a63      	ldr	r2, [pc, #396]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003996:	f023 0301 	bic.w	r3, r3, #1
 800399a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7fe f9cf 	bl	8001d40 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039a6:	f7fe f9cb 	bl	8001d40 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e105      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039b8:	4b5a      	ldr	r3, [pc, #360]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 80039ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1ef      	bne.n	80039a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80f9 	beq.w	8003bc2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	f040 80cf 	bne.w	8003b78 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039da:	4b52      	ldr	r3, [pc, #328]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f003 0203 	and.w	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d12c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	3b01      	subs	r3, #1
 80039fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d123      	bne.n	8003a48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d11b      	bne.n	8003a48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d113      	bne.n	8003a48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d109      	bne.n	8003a48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	3b01      	subs	r3, #1
 8003a42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d071      	beq.n	8003b2c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	d068      	beq.n	8003b20 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a4e:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a5a:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0ac      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a6a:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2d      	ldr	r2, [pc, #180]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003a70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a76:	f7fe f963 	bl	8001d40 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7e:	f7fe f95f 	bl	8001d40 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e099      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a90:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f0      	bne.n	8003a7e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a9c:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <HAL_RCC_OscConfig+0x788>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003aac:	3a01      	subs	r2, #1
 8003aae:	0112      	lsls	r2, r2, #4
 8003ab0:	4311      	orrs	r1, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ab6:	0212      	lsls	r2, r2, #8
 8003ab8:	4311      	orrs	r1, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003abe:	0852      	lsrs	r2, r2, #1
 8003ac0:	3a01      	subs	r2, #1
 8003ac2:	0552      	lsls	r2, r2, #21
 8003ac4:	4311      	orrs	r1, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003aca:	0852      	lsrs	r2, r2, #1
 8003acc:	3a01      	subs	r2, #1
 8003ace:	0652      	lsls	r2, r2, #25
 8003ad0:	4311      	orrs	r1, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ad6:	06d2      	lsls	r2, r2, #27
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	4912      	ldr	r1, [pc, #72]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a0f      	ldr	r2, [pc, #60]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aec:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003af6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003af8:	f7fe f922 	bl	8001d40 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b00:	f7fe f91e 	bl	8001d40 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e058      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b12:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b1e:	e050      	b.n	8003bc2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e04f      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
 8003b24:	40021000 	.word	0x40021000
 8003b28:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2c:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <HAL_RCC_OscConfig+0x82c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d144      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b38:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCC_OscConfig+0x82c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <HAL_RCC_OscConfig+0x82c>)
 8003b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b44:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <HAL_RCC_OscConfig+0x82c>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a20      	ldr	r2, [pc, #128]	; (8003bcc <HAL_RCC_OscConfig+0x82c>)
 8003b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b50:	f7fe f8f6 	bl	8001d40 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b58:	f7fe f8f2 	bl	8001d40 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e02c      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6a:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <HAL_RCC_OscConfig+0x82c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x7b8>
 8003b76:	e024      	b.n	8003bc2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d01f      	beq.n	8003bbe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <HAL_RCC_OscConfig+0x82c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <HAL_RCC_OscConfig+0x82c>)
 8003b84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fe f8d9 	bl	8001d40 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fe f8d5 	bl	8001d40 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e00f      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCC_OscConfig+0x82c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f0      	bne.n	8003b92 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_RCC_OscConfig+0x82c>)
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	4905      	ldr	r1, [pc, #20]	; (8003bcc <HAL_RCC_OscConfig+0x82c>)
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_OscConfig+0x830>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60cb      	str	r3, [r1, #12]
 8003bbc:	e001      	b.n	8003bc2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3720      	adds	r7, #32
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	feeefffc 	.word	0xfeeefffc

08003bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0e7      	b.n	8003db8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b75      	ldr	r3, [pc, #468]	; (8003dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d910      	bls.n	8003c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b72      	ldr	r3, [pc, #456]	; (8003dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 0207 	bic.w	r2, r3, #7
 8003bfe:	4970      	ldr	r1, [pc, #448]	; (8003dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b6e      	ldr	r3, [pc, #440]	; (8003dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0cf      	b.n	8003db8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	4b66      	ldr	r3, [pc, #408]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d908      	bls.n	8003c46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c34:	4b63      	ldr	r3, [pc, #396]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4960      	ldr	r1, [pc, #384]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d04c      	beq.n	8003cec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d107      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5a:	4b5a      	ldr	r3, [pc, #360]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d121      	bne.n	8003caa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e0a6      	b.n	8003db8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c72:	4b54      	ldr	r3, [pc, #336]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d115      	bne.n	8003caa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e09a      	b.n	8003db8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c8a:	4b4e      	ldr	r3, [pc, #312]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e08e      	b.n	8003db8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9a:	4b4a      	ldr	r3, [pc, #296]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e086      	b.n	8003db8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003caa:	4b46      	ldr	r3, [pc, #280]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f023 0203 	bic.w	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4943      	ldr	r1, [pc, #268]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fe f840 	bl	8001d40 <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc4:	f7fe f83c 	bl	8001d40 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e06e      	b.n	8003db8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	4b3a      	ldr	r3, [pc, #232]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 020c 	and.w	r2, r3, #12
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1eb      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d010      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d208      	bcs.n	8003d1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d08:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	492b      	ldr	r1, [pc, #172]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1a:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d210      	bcs.n	8003d4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d28:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 0207 	bic.w	r2, r3, #7
 8003d30:	4923      	ldr	r1, [pc, #140]	; (8003dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d38:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d001      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e036      	b.n	8003db8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d56:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	4918      	ldr	r1, [pc, #96]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d009      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d74:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4910      	ldr	r1, [pc, #64]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d88:	f000 f824 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	490b      	ldr	r1, [pc, #44]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f4>)
 8003d9a:	5ccb      	ldrb	r3, [r1, r3]
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
 8003da4:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003da6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_ClockConfig+0x1fc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fd ff77 	bl	8001ca0 <HAL_InitTick>
 8003db2:	4603      	mov	r3, r0
 8003db4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003db6:	7afb      	ldrb	r3, [r7, #11]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40022000 	.word	0x40022000
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	080049b4 	.word	0x080049b4
 8003dcc:	2000007c 	.word	0x2000007c
 8003dd0:	20000080 	.word	0x20000080

08003dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	; 0x24
 8003dd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de2:	4b3e      	ldr	r3, [pc, #248]	; (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dec:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x34>
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d121      	bne.n	8003e46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d11e      	bne.n	8003e46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e08:	4b34      	ldr	r3, [pc, #208]	; (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d107      	bne.n	8003e24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e14:	4b31      	ldr	r3, [pc, #196]	; (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	e005      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e24:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e30:	4a2b      	ldr	r2, [pc, #172]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10d      	bne.n	8003e5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e44:	e00a      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d102      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e4c:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e004      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e58:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b0c      	cmp	r3, #12
 8003e60:	d134      	bne.n	8003ecc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e62:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d003      	beq.n	8003e7a <HAL_RCC_GetSysClockFreq+0xa6>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d003      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0xac>
 8003e78:	e005      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e7c:	617b      	str	r3, [r7, #20]
      break;
 8003e7e:	e005      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e82:	617b      	str	r3, [r7, #20]
      break;
 8003e84:	e002      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	617b      	str	r3, [r7, #20]
      break;
 8003e8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e8c:	4b13      	ldr	r3, [pc, #76]	; (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	3301      	adds	r3, #1
 8003e98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e9a:	4b10      	ldr	r3, [pc, #64]	; (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	fb03 f202 	mul.w	r2, r3, r2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	0e5b      	lsrs	r3, r3, #25
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ecc:	69bb      	ldr	r3, [r7, #24]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3724      	adds	r7, #36	; 0x24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	080049c4 	.word	0x080049c4
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	007a1200 	.word	0x007a1200

08003eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f04:	f7ff f9e8 	bl	80032d8 <HAL_PWREx_GetVoltageRange>
 8003f08:	6178      	str	r0, [r7, #20]
 8003f0a:	e014      	b.n	8003f36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f0c:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	4a24      	ldr	r2, [pc, #144]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6593      	str	r3, [r2, #88]	; 0x58
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f24:	f7ff f9d8 	bl	80032d8 <HAL_PWREx_GetVoltageRange>
 8003f28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3c:	d10b      	bne.n	8003f56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b80      	cmp	r3, #128	; 0x80
 8003f42:	d919      	bls.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2ba0      	cmp	r3, #160	; 0xa0
 8003f48:	d902      	bls.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	e013      	b.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f50:	2301      	movs	r3, #1
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	e010      	b.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b80      	cmp	r3, #128	; 0x80
 8003f5a:	d902      	bls.n	8003f62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	e00a      	b.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b80      	cmp	r3, #128	; 0x80
 8003f66:	d102      	bne.n	8003f6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f68:	2302      	movs	r3, #2
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	e004      	b.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b70      	cmp	r3, #112	; 0x70
 8003f72:	d101      	bne.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f74:	2301      	movs	r3, #1
 8003f76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 0207 	bic.w	r2, r3, #7
 8003f80:	4909      	ldr	r1, [pc, #36]	; (8003fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d001      	beq.n	8003f9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40022000 	.word	0x40022000

08003fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fb8:	2300      	movs	r3, #0
 8003fba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d041      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fd0:	d02a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003fd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fd6:	d824      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fdc:	d008      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fe2:	d81e      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fec:	d010      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fee:	e018      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ff0:	4b86      	ldr	r3, [pc, #536]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a85      	ldr	r2, [pc, #532]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ffc:	e015      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f000 facd 	bl	80045a4 <RCCEx_PLLSAI1_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800400e:	e00c      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3320      	adds	r3, #32
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fbb6 	bl	8004788 <RCCEx_PLLSAI2_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004020:	e003      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	74fb      	strb	r3, [r7, #19]
      break;
 8004026:	e000      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004030:	4b76      	ldr	r3, [pc, #472]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800403e:	4973      	ldr	r1, [pc, #460]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004046:	e001      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004048:	7cfb      	ldrb	r3, [r7, #19]
 800404a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d041      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800405c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004060:	d02a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004062:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004066:	d824      	bhi.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800406c:	d008      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800406e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004072:	d81e      	bhi.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800407c:	d010      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800407e:	e018      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004080:	4b62      	ldr	r3, [pc, #392]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a61      	ldr	r2, [pc, #388]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800408c:	e015      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3304      	adds	r3, #4
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fa85 	bl	80045a4 <RCCEx_PLLSAI1_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800409e:	e00c      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3320      	adds	r3, #32
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fb6e 	bl	8004788 <RCCEx_PLLSAI2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040b0:	e003      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	74fb      	strb	r3, [r7, #19]
      break;
 80040b6:	e000      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80040b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10b      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040c0:	4b52      	ldr	r3, [pc, #328]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ce:	494f      	ldr	r1, [pc, #316]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040d6:	e001      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80a0 	beq.w	800422a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ea:	2300      	movs	r3, #0
 80040ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040ee:	4b47      	ldr	r3, [pc, #284]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004104:	4b41      	ldr	r3, [pc, #260]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004108:	4a40      	ldr	r2, [pc, #256]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410e:	6593      	str	r3, [r2, #88]	; 0x58
 8004110:	4b3e      	ldr	r3, [pc, #248]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411c:	2301      	movs	r3, #1
 800411e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004120:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a3a      	ldr	r2, [pc, #232]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800412c:	f7fd fe08 	bl	8001d40 <HAL_GetTick>
 8004130:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004132:	e009      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004134:	f7fd fe04 	bl	8001d40 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d902      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	74fb      	strb	r3, [r7, #19]
        break;
 8004146:	e005      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004148:	4b31      	ldr	r3, [pc, #196]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ef      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004154:	7cfb      	ldrb	r3, [r7, #19]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d15c      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800415a:	4b2c      	ldr	r3, [pc, #176]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004164:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01f      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	429a      	cmp	r2, r3
 8004176:	d019      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004182:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004184:	4b21      	ldr	r3, [pc, #132]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	4a20      	ldr	r2, [pc, #128]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004194:	4b1d      	ldr	r3, [pc, #116]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	4a1c      	ldr	r2, [pc, #112]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041a4:	4a19      	ldr	r2, [pc, #100]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d016      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b6:	f7fd fdc3 	bl	8001d40 <HAL_GetTick>
 80041ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041bc:	e00b      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041be:	f7fd fdbf 	bl	8001d40 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d902      	bls.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	74fb      	strb	r3, [r7, #19]
            break;
 80041d4:	e006      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d6:	4b0d      	ldr	r3, [pc, #52]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ec      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10c      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	4904      	ldr	r1, [pc, #16]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004202:	e009      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	74bb      	strb	r3, [r7, #18]
 8004208:	e006      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000
 8004210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004218:	7c7b      	ldrb	r3, [r7, #17]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d105      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800421e:	4ba6      	ldr	r3, [pc, #664]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	4aa5      	ldr	r2, [pc, #660]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004228:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004236:	4ba0      	ldr	r3, [pc, #640]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f023 0203 	bic.w	r2, r3, #3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	499c      	ldr	r1, [pc, #624]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004258:	4b97      	ldr	r3, [pc, #604]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	f023 020c 	bic.w	r2, r3, #12
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	4994      	ldr	r1, [pc, #592]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800427a:	4b8f      	ldr	r3, [pc, #572]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	498b      	ldr	r1, [pc, #556]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800429c:	4b86      	ldr	r3, [pc, #536]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	4983      	ldr	r1, [pc, #524]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042be:	4b7e      	ldr	r3, [pc, #504]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042cc:	497a      	ldr	r1, [pc, #488]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042e0:	4b75      	ldr	r3, [pc, #468]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ee:	4972      	ldr	r1, [pc, #456]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004302:	4b6d      	ldr	r3, [pc, #436]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004310:	4969      	ldr	r1, [pc, #420]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004324:	4b64      	ldr	r3, [pc, #400]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004332:	4961      	ldr	r1, [pc, #388]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004346:	4b5c      	ldr	r3, [pc, #368]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004354:	4958      	ldr	r1, [pc, #352]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004368:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	4950      	ldr	r1, [pc, #320]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800438a:	4b4b      	ldr	r3, [pc, #300]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	4947      	ldr	r1, [pc, #284]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ac:	4b42      	ldr	r3, [pc, #264]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043b2:	f023 0203 	bic.w	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ba:	493f      	ldr	r1, [pc, #252]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d028      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ce:	4b3a      	ldr	r3, [pc, #232]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	4936      	ldr	r1, [pc, #216]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ec:	d106      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ee:	4b32      	ldr	r3, [pc, #200]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	4a31      	ldr	r2, [pc, #196]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f8:	60d3      	str	r3, [r2, #12]
 80043fa:	e011      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004404:	d10c      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3304      	adds	r3, #4
 800440a:	2101      	movs	r1, #1
 800440c:	4618      	mov	r0, r3
 800440e:	f000 f8c9 	bl	80045a4 <RCCEx_PLLSAI1_Config>
 8004412:	4603      	mov	r3, r0
 8004414:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800441c:	7cfb      	ldrb	r3, [r7, #19]
 800441e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d028      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800442c:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443a:	491f      	ldr	r1, [pc, #124]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800444a:	d106      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800444c:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4a19      	ldr	r2, [pc, #100]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004456:	60d3      	str	r3, [r2, #12]
 8004458:	e011      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004462:	d10c      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f000 f89a 	bl	80045a4 <RCCEx_PLLSAI1_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800447a:	7cfb      	ldrb	r3, [r7, #19]
 800447c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d02a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004498:	4907      	ldr	r1, [pc, #28]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a8:	d108      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044aa:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	4a02      	ldr	r2, [pc, #8]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b4:	60d3      	str	r3, [r2, #12]
 80044b6:	e013      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80044b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3304      	adds	r3, #4
 80044ca:	2101      	movs	r1, #1
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 f869 	bl	80045a4 <RCCEx_PLLSAI1_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d02f      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044ec:	4b2c      	ldr	r3, [pc, #176]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fa:	4929      	ldr	r1, [pc, #164]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800450a:	d10d      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 f846 	bl	80045a4 <RCCEx_PLLSAI1_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d014      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004522:	7cfb      	ldrb	r3, [r7, #19]
 8004524:	74bb      	strb	r3, [r7, #18]
 8004526:	e011      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004530:	d10c      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3320      	adds	r3, #32
 8004536:	2102      	movs	r1, #2
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f925 	bl	8004788 <RCCEx_PLLSAI2_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004542:	7cfb      	ldrb	r3, [r7, #19]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004548:	7cfb      	ldrb	r3, [r7, #19]
 800454a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00b      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004558:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004568:	490d      	ldr	r1, [pc, #52]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00b      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800457c:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800458c:	4904      	ldr	r1, [pc, #16]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004594:	7cbb      	ldrb	r3, [r7, #18]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000

080045a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045b2:	4b74      	ldr	r3, [pc, #464]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d018      	beq.n	80045f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045be:	4b71      	ldr	r3, [pc, #452]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f003 0203 	and.w	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d10d      	bne.n	80045ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
       ||
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045d6:	4b6b      	ldr	r3, [pc, #428]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
       ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d047      	beq.n	800467a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
 80045ee:	e044      	b.n	800467a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d018      	beq.n	800462a <RCCEx_PLLSAI1_Config+0x86>
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d825      	bhi.n	8004648 <RCCEx_PLLSAI1_Config+0xa4>
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d002      	beq.n	8004606 <RCCEx_PLLSAI1_Config+0x62>
 8004600:	2b02      	cmp	r3, #2
 8004602:	d009      	beq.n	8004618 <RCCEx_PLLSAI1_Config+0x74>
 8004604:	e020      	b.n	8004648 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004606:	4b5f      	ldr	r3, [pc, #380]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d11d      	bne.n	800464e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004616:	e01a      	b.n	800464e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004618:	4b5a      	ldr	r3, [pc, #360]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004620:	2b00      	cmp	r3, #0
 8004622:	d116      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004628:	e013      	b.n	8004652 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800462a:	4b56      	ldr	r3, [pc, #344]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004636:	4b53      	ldr	r3, [pc, #332]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004646:	e006      	b.n	8004656 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      break;
 800464c:	e004      	b.n	8004658 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004656:	bf00      	nop
    }

    if(status == HAL_OK)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10d      	bne.n	800467a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800465e:	4b49      	ldr	r3, [pc, #292]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	3b01      	subs	r3, #1
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	430b      	orrs	r3, r1
 8004674:	4943      	ldr	r1, [pc, #268]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004676:	4313      	orrs	r3, r2
 8004678:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d17c      	bne.n	800477a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004680:	4b40      	ldr	r3, [pc, #256]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a3f      	ldr	r2, [pc, #252]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800468a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800468c:	f7fd fb58 	bl	8001d40 <HAL_GetTick>
 8004690:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004692:	e009      	b.n	80046a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004694:	f7fd fb54 	bl	8001d40 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d902      	bls.n	80046a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	73fb      	strb	r3, [r7, #15]
        break;
 80046a6:	e005      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046a8:	4b36      	ldr	r3, [pc, #216]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ef      	bne.n	8004694 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d15f      	bne.n	800477a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d110      	bne.n	80046e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046c0:	4b30      	ldr	r3, [pc, #192]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80046c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6892      	ldr	r2, [r2, #8]
 80046d0:	0211      	lsls	r1, r2, #8
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68d2      	ldr	r2, [r2, #12]
 80046d6:	06d2      	lsls	r2, r2, #27
 80046d8:	430a      	orrs	r2, r1
 80046da:	492a      	ldr	r1, [pc, #168]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	610b      	str	r3, [r1, #16]
 80046e0:	e027      	b.n	8004732 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d112      	bne.n	800470e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046e8:	4b26      	ldr	r3, [pc, #152]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80046f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6892      	ldr	r2, [r2, #8]
 80046f8:	0211      	lsls	r1, r2, #8
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6912      	ldr	r2, [r2, #16]
 80046fe:	0852      	lsrs	r2, r2, #1
 8004700:	3a01      	subs	r2, #1
 8004702:	0552      	lsls	r2, r2, #21
 8004704:	430a      	orrs	r2, r1
 8004706:	491f      	ldr	r1, [pc, #124]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004708:	4313      	orrs	r3, r2
 800470a:	610b      	str	r3, [r1, #16]
 800470c:	e011      	b.n	8004732 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004716:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6892      	ldr	r2, [r2, #8]
 800471e:	0211      	lsls	r1, r2, #8
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6952      	ldr	r2, [r2, #20]
 8004724:	0852      	lsrs	r2, r2, #1
 8004726:	3a01      	subs	r2, #1
 8004728:	0652      	lsls	r2, r2, #25
 800472a:	430a      	orrs	r2, r1
 800472c:	4915      	ldr	r1, [pc, #84]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 800472e:	4313      	orrs	r3, r2
 8004730:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004732:	4b14      	ldr	r3, [pc, #80]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a13      	ldr	r2, [pc, #76]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004738:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800473c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473e:	f7fd faff 	bl	8001d40 <HAL_GetTick>
 8004742:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004744:	e009      	b.n	800475a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004746:	f7fd fafb 	bl	8001d40 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d902      	bls.n	800475a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	73fb      	strb	r3, [r7, #15]
          break;
 8004758:	e005      	b.n	8004766 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0ef      	beq.n	8004746 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d106      	bne.n	800477a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	4903      	ldr	r1, [pc, #12]	; (8004784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004776:	4313      	orrs	r3, r2
 8004778:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40021000 	.word	0x40021000

08004788 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004796:	4b69      	ldr	r3, [pc, #420]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d018      	beq.n	80047d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047a2:	4b66      	ldr	r3, [pc, #408]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0203 	and.w	r2, r3, #3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d10d      	bne.n	80047ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
       ||
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047ba:	4b60      	ldr	r3, [pc, #384]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
       ||
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d047      	beq.n	800485e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	e044      	b.n	800485e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d018      	beq.n	800480e <RCCEx_PLLSAI2_Config+0x86>
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d825      	bhi.n	800482c <RCCEx_PLLSAI2_Config+0xa4>
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d002      	beq.n	80047ea <RCCEx_PLLSAI2_Config+0x62>
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d009      	beq.n	80047fc <RCCEx_PLLSAI2_Config+0x74>
 80047e8:	e020      	b.n	800482c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ea:	4b54      	ldr	r3, [pc, #336]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11d      	bne.n	8004832 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047fa:	e01a      	b.n	8004832 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047fc:	4b4f      	ldr	r3, [pc, #316]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	2b00      	cmp	r3, #0
 8004806:	d116      	bne.n	8004836 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800480c:	e013      	b.n	8004836 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800480e:	4b4b      	ldr	r3, [pc, #300]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10f      	bne.n	800483a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800481a:	4b48      	ldr	r3, [pc, #288]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800482a:	e006      	b.n	800483a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      break;
 8004830:	e004      	b.n	800483c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004832:	bf00      	nop
 8004834:	e002      	b.n	800483c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004836:	bf00      	nop
 8004838:	e000      	b.n	800483c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800483a:	bf00      	nop
    }

    if(status == HAL_OK)
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10d      	bne.n	800485e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004842:	4b3e      	ldr	r3, [pc, #248]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6819      	ldr	r1, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	3b01      	subs	r3, #1
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	430b      	orrs	r3, r1
 8004858:	4938      	ldr	r1, [pc, #224]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 800485a:	4313      	orrs	r3, r2
 800485c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d166      	bne.n	8004932 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004864:	4b35      	ldr	r3, [pc, #212]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a34      	ldr	r2, [pc, #208]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 800486a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004870:	f7fd fa66 	bl	8001d40 <HAL_GetTick>
 8004874:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004876:	e009      	b.n	800488c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004878:	f7fd fa62 	bl	8001d40 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d902      	bls.n	800488c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	73fb      	strb	r3, [r7, #15]
        break;
 800488a:	e005      	b.n	8004898 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800488c:	4b2b      	ldr	r3, [pc, #172]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1ef      	bne.n	8004878 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d149      	bne.n	8004932 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d110      	bne.n	80048c6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048a4:	4b25      	ldr	r3, [pc, #148]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80048ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6892      	ldr	r2, [r2, #8]
 80048b4:	0211      	lsls	r1, r2, #8
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68d2      	ldr	r2, [r2, #12]
 80048ba:	06d2      	lsls	r2, r2, #27
 80048bc:	430a      	orrs	r2, r1
 80048be:	491f      	ldr	r1, [pc, #124]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	614b      	str	r3, [r1, #20]
 80048c4:	e011      	b.n	80048ea <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048c6:	4b1d      	ldr	r3, [pc, #116]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6892      	ldr	r2, [r2, #8]
 80048d6:	0211      	lsls	r1, r2, #8
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6912      	ldr	r2, [r2, #16]
 80048dc:	0852      	lsrs	r2, r2, #1
 80048de:	3a01      	subs	r2, #1
 80048e0:	0652      	lsls	r2, r2, #25
 80048e2:	430a      	orrs	r2, r1
 80048e4:	4915      	ldr	r1, [pc, #84]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048ea:	4b14      	ldr	r3, [pc, #80]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a13      	ldr	r2, [pc, #76]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 80048f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f6:	f7fd fa23 	bl	8001d40 <HAL_GetTick>
 80048fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048fc:	e009      	b.n	8004912 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048fe:	f7fd fa1f 	bl	8001d40 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d902      	bls.n	8004912 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	73fb      	strb	r3, [r7, #15]
          break;
 8004910:	e005      	b.n	800491e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0ef      	beq.n	80048fe <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d106      	bne.n	8004932 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	4903      	ldr	r1, [pc, #12]	; (800493c <RCCEx_PLLSAI2_Config+0x1b4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000

08004940 <__libc_init_array>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	4d0d      	ldr	r5, [pc, #52]	; (8004978 <__libc_init_array+0x38>)
 8004944:	4c0d      	ldr	r4, [pc, #52]	; (800497c <__libc_init_array+0x3c>)
 8004946:	1b64      	subs	r4, r4, r5
 8004948:	10a4      	asrs	r4, r4, #2
 800494a:	2600      	movs	r6, #0
 800494c:	42a6      	cmp	r6, r4
 800494e:	d109      	bne.n	8004964 <__libc_init_array+0x24>
 8004950:	4d0b      	ldr	r5, [pc, #44]	; (8004980 <__libc_init_array+0x40>)
 8004952:	4c0c      	ldr	r4, [pc, #48]	; (8004984 <__libc_init_array+0x44>)
 8004954:	f000 f820 	bl	8004998 <_init>
 8004958:	1b64      	subs	r4, r4, r5
 800495a:	10a4      	asrs	r4, r4, #2
 800495c:	2600      	movs	r6, #0
 800495e:	42a6      	cmp	r6, r4
 8004960:	d105      	bne.n	800496e <__libc_init_array+0x2e>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	f855 3b04 	ldr.w	r3, [r5], #4
 8004968:	4798      	blx	r3
 800496a:	3601      	adds	r6, #1
 800496c:	e7ee      	b.n	800494c <__libc_init_array+0xc>
 800496e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004972:	4798      	blx	r3
 8004974:	3601      	adds	r6, #1
 8004976:	e7f2      	b.n	800495e <__libc_init_array+0x1e>
 8004978:	080049f4 	.word	0x080049f4
 800497c:	080049f4 	.word	0x080049f4
 8004980:	080049f4 	.word	0x080049f4
 8004984:	080049f8 	.word	0x080049f8

08004988 <memset>:
 8004988:	4402      	add	r2, r0
 800498a:	4603      	mov	r3, r0
 800498c:	4293      	cmp	r3, r2
 800498e:	d100      	bne.n	8004992 <memset+0xa>
 8004990:	4770      	bx	lr
 8004992:	f803 1b01 	strb.w	r1, [r3], #1
 8004996:	e7f9      	b.n	800498c <memset+0x4>

08004998 <_init>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	bf00      	nop
 800499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499e:	bc08      	pop	{r3}
 80049a0:	469e      	mov	lr, r3
 80049a2:	4770      	bx	lr

080049a4 <_fini>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	bf00      	nop
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr
